[{"C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\index.js":"1","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\App.js":"2","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\components\\Navbar.js":"3","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\pages\\SearchBooks.js":"4","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\pages\\SavedBooks.js":"5","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\utils\\auth.js":"6","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\utils\\queries.js":"7","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\components\\SignupForm.js":"8","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\components\\LoginForm.js":"9","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\utils\\localStorage.js":"10","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\utils\\API.js":"11","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\utils\\mutations.js":"12"},{"size":278,"mtime":1740074221540,"results":"13","hashOfConfig":"14"},{"size":1411,"mtime":1740074221536,"results":"15","hashOfConfig":"14"},{"size":2644,"mtime":1740074221538,"results":"16","hashOfConfig":"14"},{"size":5954,"mtime":1740074221542,"results":"17","hashOfConfig":"14"},{"size":2977,"mtime":1740074221540,"results":"18","hashOfConfig":"14"},{"size":1283,"mtime":1740074221544,"results":"19","hashOfConfig":"14"},{"size":295,"mtime":1740074221547,"results":"20","hashOfConfig":"14"},{"size":3981,"mtime":1740074221539,"results":"21","hashOfConfig":"14"},{"size":3178,"mtime":1740074221537,"results":"22","hashOfConfig":"14"},{"size":823,"mtime":1740074221545,"results":"23","hashOfConfig":"14"},{"size":1449,"mtime":1740074221543,"results":"24","hashOfConfig":"14"},{"size":1850,"mtime":1740074221545,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3qygsr",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\index.js",[],[],"C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\App.js",["67"],[],"import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\nimport Auth from './utils/auth'\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"/graphql\",\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem(\"id_token\");\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <>\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path='/' component={SearchBooks} />\r\n            <Route exact path='/saved' component={SavedBooks} />\r\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\r\n          </Switch>\r\n        </>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\components\\Navbar.js",[],[],"C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\pages\\SearchBooks.js",["68","69"],[],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  Row\r\n} from 'react-bootstrap';\r\nimport { useMutation } from \"@apollo/client\";\r\nimport Auth from '../utils/auth';\r\nimport { searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\nimport { SAVE_BOOK } from '../utils/mutations';\r\nimport context from 'react-bootstrap/esm/AccordionContext';\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  const [saveBook, { error }] = useMutation(SAVE_BOOK); \r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    console.log(\"trying to save book\");\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n    console.log(`bookToSave: ${bookToSave}`);\r\n\r\n    // Destructure the properties of bookToSave\r\n    const { authors, title, description, image } = bookToSave;\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n    console.log(`token: ${token}`);\r\n\r\n    console.log(`context: ${context}`);\r\n    console.log(context.user);\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    console.log(`context2: ${context}`);\r\n\r\n    try {\r\n      console.log(`book to save here: ${authors}`);\r\n      console.log(`book to save here: ${title}`);\r\n      console.log(`book to save here: ${description}`);\r\n      console.log(`book to save here: ${image}`);\r\n      console.log(`token in try: ${token}`);\r\n      const { data } = await saveBook({\r\n        variables: { input: bookToSave },\r\n        context: {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        },\r\n      });\r\n\r\n      console.log(`book to save id: ${bookToSave.bookId}`);\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds((savedBookIds) => [...savedBookIds, bookToSave.bookId]);\r\n      console.log(\"Book saved!\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new Error(\"Unable to save new title to your saved books list!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='text-light bg-dark pt-5'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Container>\r\n      </div>\r\n\r\n      <Container>\r\n        <h2 className='pt-5'>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <Row>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Col md=\"4\">\r\n                <Card key={book.bookId} border='dark'>\r\n                  {book.image ? (\r\n                    <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                  ) : null}\r\n                  <Card.Body>\r\n                    <Card.Title>{book.title}</Card.Title>\r\n                    <p className='small'>Authors: {book.authors}</p>\r\n                    <Card.Text>{book.description}</Card.Text>\r\n                    {Auth.loggedIn() && (\r\n                      <Button\r\n                        disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                        className='btn-block btn-info'\r\n                        onClick={() => handleSaveBook(book.bookId)}>\r\n                        {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                          ? 'This book has already been saved!'\r\n                          : 'Save this Book!'}\r\n                      </Button>\r\n                    )}\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            );\r\n          })}\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\pages\\SavedBooks.js",["70","71","72","73","74","75"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Container, Card, Button, Row, Col } from 'react-bootstrap';\r\nimport {useQuery, useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth';\r\nimport { removeBookId } from '../utils/localStorage';\r\nimport { GET_ME } from '../utils/queries';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\n\r\nconst SavedBooks = () => {\r\n  const { data: userData, loading: userLoading, error: userError } = useQuery(GET_ME);\r\n  \r\nconst [removeBook, { data: removeData, loading: removeLoading, error: removeError }] = useMutation(REMOVE_BOOK);\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      throw new Error('You are not authenticated to remove a book!');\r\n    }\r\n\r\n    try {\r\n      // const { data: updatedUser } = await removeBook({ variables: { bookId }, context: { headers: { Authorization: `Bearer ${token}` } } });\r\n\r\n       const { data } = await removeBook({\r\n         variables: { bookId },\r\n         context: { headers: { Authorization: `Bearer ${token}` } },\r\n       });\r\n\r\n    } catch (err) {\r\n      console.error(err);\r\n        throw new Error(`An error occurred removing the book! Error message: ${err.message}`);\r\n    }\r\n  };\r\n\r\n    \r\n  if (userLoading) {\r\n    return <h2>Loading...</h2>;\r\n  } else if (userError || !userData) {\r\n    console.error(userError);\r\n  }\r\n\r\n  // if data isn't here yet, say so\r\n  if (removeLoading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div fluid className='text-light bg-dark p-5'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </div>\r\n      <Container>\r\n        <h2 className='pt-5'>\r\n          {userData.me.savedBooks.length\r\n            ? `Viewing ${userData.me.savedBooks.length} saved ${userData.me.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <Row>\r\n          {userData.me.savedBooks.map((book) => {\r\n            return (\r\n              <Col md=\"4\">\r\n                <Card key={book.bookId} border='dark'>\r\n                  {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                  <Card.Body>\r\n                    <Card.Title>{book.title}</Card.Title>\r\n                    <p className='small'>Authors: {book.authors}</p>\r\n                    <Card.Text>{book.description}</Card.Text>\r\n                    <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                      Delete this Book!\r\n                    </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            );\r\n          })}\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\utils\\auth.js",["76"],[],"// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\utils\\queries.js",[],[],"C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\components\\SignupForm.js",["77"],[],"import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client'\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { ADD_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      console.log(`userFormData: ${userFormData}`);\r\n      console.log(`userFormData.username: ${userFormData.username}`);\r\n      console.log(`userFormData.email: ${userFormData.email}`);\r\n      console.log(`userFormData.password: ${userFormData.password}`);\r\n      const { data } = await addUser ({\r\n        variables: {\r\n          username: userFormData.username,\r\n          email: userFormData.email,\r\n          password: userFormData.password,\r\n        }\r\n      });\r\n\r\n      if (!data) {\r\n        throw new Error(\"something went wrong with the GraphQl server!\");\r\n      }\r\n      const { token, user } = data.addUser;\r\n      console.log(user);\r\n      Auth.login(token);\r\n    } catch (err) {\r\n      console.error('Error with signing-up:', err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group className='mb-3'>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='mb-3'>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='mb-3'>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\components\\LoginForm.js",[],[],"C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\utils\\localStorage.js",[],[],"C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\utils\\API.js",[],[],"C:\\Users\\jared\\PortfolioProjects\\BookwormSE\\Develop\\client\\src\\utils\\mutations.js",[],[],{"ruleId":"78","severity":1,"message":"79","line":8,"column":8,"nodeType":"80","messageId":"81","endLine":8,"endColumn":12},{"ruleId":"78","severity":1,"message":"82","line":32,"column":22,"nodeType":"80","messageId":"81","endLine":32,"endColumn":27},{"ruleId":"78","severity":1,"message":"83","line":95,"column":15,"nodeType":"80","messageId":"81","endLine":95,"endColumn":19},{"ruleId":"78","severity":1,"message":"84","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"85","line":1,"column":27,"nodeType":"80","messageId":"81","endLine":1,"endColumn":36},{"ruleId":"78","severity":1,"message":"86","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":22},{"ruleId":"78","severity":1,"message":"87","line":12,"column":28,"nodeType":"80","messageId":"81","endLine":12,"endColumn":38},{"ruleId":"78","severity":1,"message":"88","line":12,"column":71,"nodeType":"80","messageId":"81","endLine":12,"endColumn":82},{"ruleId":"78","severity":1,"message":"83","line":25,"column":16,"nodeType":"80","messageId":"81","endLine":25,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":49,"column":1,"nodeType":"91","endLine":49,"endColumn":34},{"ruleId":"78","severity":1,"message":"82","line":15,"column":21,"nodeType":"80","messageId":"81","endLine":15,"endColumn":26},"no-unused-vars","'Auth' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'removeBookId' is defined but never used.","'removeData' is assigned a value but never used.","'removeError' is assigned a value but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration"]