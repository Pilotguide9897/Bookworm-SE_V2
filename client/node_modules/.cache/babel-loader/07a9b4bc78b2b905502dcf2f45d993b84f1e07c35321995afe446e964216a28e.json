{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isInputObjectType, isInterfaceType, isObjectType } from '../../type/definition.mjs';\n\n/**\r\n * Unique field definition names\r\n *\r\n * A GraphQL complex type is only valid if all its fields are uniquely named.\r\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n    var typeName = node.name.value;\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    var fieldNames = knownFieldNames[typeName];\n    var _iterator = _createForOfIteratorHelper(fieldNodes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var fieldDef = _step.value;\n        var fieldName = fieldDef.name.value;\n        if (hasField(existingTypeMap[typeName], fieldName)) {\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), {\n            nodes: fieldDef.name\n          }));\n        } else if (fieldNames[fieldName]) {\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\"), {\n            nodes: [fieldNames[fieldName], fieldDef.name]\n          }));\n        } else {\n          fieldNames[fieldName] = fieldDef.name;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return false;\n  }\n}\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n  return false;\n}","map":{"version":3,"names":["GraphQLError","isInputObjectType","isInterfaceType","isObjectType","UniqueFieldDefinitionNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","_node$fields","typeName","name","value","fieldNodes","fields","fieldNames","_iterator","_createForOfIteratorHelper","_step","s","n","done","fieldDef","fieldName","hasField","reportError","concat","nodes","err","e","f","type","getFields"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport {\r\n  isInputObjectType,\r\n  isInterfaceType,\r\n  isObjectType,\r\n} from '../../type/definition.mjs';\r\n\r\n/**\r\n * Unique field definition names\r\n *\r\n * A GraphQL complex type is only valid if all its fields are uniquely named.\r\n */\r\nexport function UniqueFieldDefinitionNamesRule(context) {\r\n  const schema = context.getSchema();\r\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\r\n  const knownFieldNames = Object.create(null);\r\n  return {\r\n    InputObjectTypeDefinition: checkFieldUniqueness,\r\n    InputObjectTypeExtension: checkFieldUniqueness,\r\n    InterfaceTypeDefinition: checkFieldUniqueness,\r\n    InterfaceTypeExtension: checkFieldUniqueness,\r\n    ObjectTypeDefinition: checkFieldUniqueness,\r\n    ObjectTypeExtension: checkFieldUniqueness,\r\n  };\r\n\r\n  function checkFieldUniqueness(node) {\r\n    var _node$fields;\r\n\r\n    const typeName = node.name.value;\r\n\r\n    if (!knownFieldNames[typeName]) {\r\n      knownFieldNames[typeName] = Object.create(null);\r\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\r\n\r\n    /* c8 ignore next */\r\n\r\n    const fieldNodes =\r\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\r\n        ? _node$fields\r\n        : [];\r\n    const fieldNames = knownFieldNames[typeName];\r\n\r\n    for (const fieldDef of fieldNodes) {\r\n      const fieldName = fieldDef.name.value;\r\n\r\n      if (hasField(existingTypeMap[typeName], fieldName)) {\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\r\n            {\r\n              nodes: fieldDef.name,\r\n            },\r\n          ),\r\n        );\r\n      } else if (fieldNames[fieldName]) {\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\r\n            {\r\n              nodes: [fieldNames[fieldName], fieldDef.name],\r\n            },\r\n          ),\r\n        );\r\n      } else {\r\n        fieldNames[fieldName] = fieldDef.name;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction hasField(type, fieldName) {\r\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\r\n    return type.getFields()[fieldName] != null;\r\n  }\r\n\r\n  return false;\r\n}\r\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,SACEC,iBAAiB,EACjBC,eAAe,EACfC,YAAY,QACP,2BAA2B;;AAElC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,8BAA8BA,CAACC,OAAO,EAAE;EACtD,IAAMC,MAAM,GAAGD,OAAO,CAACE,SAAS,CAAC,CAAC;EAClC,IAAMC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAU,CAAC,CAAC,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC1E,IAAMC,eAAe,GAAGF,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC3C,OAAO;IACLE,yBAAyB,EAAEC,oBAAoB;IAC/CC,wBAAwB,EAAED,oBAAoB;IAC9CE,uBAAuB,EAAEF,oBAAoB;IAC7CG,sBAAsB,EAAEH,oBAAoB;IAC5CI,oBAAoB,EAAEJ,oBAAoB;IAC1CK,mBAAmB,EAAEL;EACvB,CAAC;EAED,SAASA,oBAAoBA,CAACM,IAAI,EAAE;IAClC,IAAIC,YAAY;IAEhB,IAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAI,CAACC,KAAK;IAEhC,IAAI,CAACZ,eAAe,CAACU,QAAQ,CAAC,EAAE;MAC9BV,eAAe,CAACU,QAAQ,CAAC,GAAGZ,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IACjD,CAAC,CAAC;;IAEF;;IAEA,IAAMc,UAAU,GACd,CAACJ,YAAY,GAAGD,IAAI,CAACM,MAAM,MAAM,IAAI,IAAIL,YAAY,KAAK,KAAK,CAAC,GAC5DA,YAAY,GACZ,EAAE;IACR,IAAMM,UAAU,GAAGf,eAAe,CAACU,QAAQ,CAAC;IAAC,IAAAM,SAAA,GAAAC,0BAAA,CAEtBJ,UAAU;MAAAK,KAAA;IAAA;MAAjC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAmC;QAAA,IAAxBC,QAAQ,GAAAJ,KAAA,CAAAN,KAAA;QACjB,IAAMW,SAAS,GAAGD,QAAQ,CAACX,IAAI,CAACC,KAAK;QAErC,IAAIY,QAAQ,CAAC5B,eAAe,CAACc,QAAQ,CAAC,EAAEa,SAAS,CAAC,EAAE;UAClD9B,OAAO,CAACgC,WAAW,CACjB,IAAIrC,YAAY,YAAAsC,MAAA,CACJhB,QAAQ,OAAAgB,MAAA,CAAIH,SAAS,yFAC/B;YACEI,KAAK,EAAEL,QAAQ,CAACX;UAClB,CACF,CACF,CAAC;QACH,CAAC,MAAM,IAAII,UAAU,CAACQ,SAAS,CAAC,EAAE;UAChC9B,OAAO,CAACgC,WAAW,CACjB,IAAIrC,YAAY,YAAAsC,MAAA,CACJhB,QAAQ,OAAAgB,MAAA,CAAIH,SAAS,mCAC/B;YACEI,KAAK,EAAE,CAACZ,UAAU,CAACQ,SAAS,CAAC,EAAED,QAAQ,CAACX,IAAI;UAC9C,CACF,CACF,CAAC;QACH,CAAC,MAAM;UACLI,UAAU,CAACQ,SAAS,CAAC,GAAGD,QAAQ,CAACX,IAAI;QACvC;MACF;IAAC,SAAAiB,GAAA;MAAAZ,SAAA,CAAAa,CAAA,CAAAD,GAAA;IAAA;MAAAZ,SAAA,CAAAc,CAAA;IAAA;IAED,OAAO,KAAK;EACd;AACF;AAEA,SAASN,QAAQA,CAACO,IAAI,EAAER,SAAS,EAAE;EACjC,IAAIhC,YAAY,CAACwC,IAAI,CAAC,IAAIzC,eAAe,CAACyC,IAAI,CAAC,IAAI1C,iBAAiB,CAAC0C,IAAI,CAAC,EAAE;IAC1E,OAAOA,IAAI,CAACC,SAAS,CAAC,CAAC,CAACT,SAAS,CAAC,IAAI,IAAI;EAC5C;EAEA,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}