{"ast":null,"code":"import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport { printLocation, printSourceLocation } from '../language/printLocation.mjs';\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5]\n    };\n  }\n  return firstArg;\n}\n/**\r\n * A GraphQLError describes an Error found during the parse, validate, or\r\n * execute phases of performing a GraphQL operation. In addition to a message\r\n * and stack trace, it also includes information about the locations in a\r\n * GraphQL document and/or execution result that correspond to the Error.\r\n */\n\nexport class GraphQLError extends Error {\n  /**\r\n   * An array of `{ line, column }` locations within the source GraphQL document\r\n   * which correspond to this error.\r\n   *\r\n   * Errors during validation often contain multiple locations, for example to\r\n   * point out two things with the same name. Errors during execution include a\r\n   * single location, the field which produced the error.\r\n   *\r\n   * Enumerable, and appears in the result of JSON.stringify().\r\n   */\n\n  /**\r\n   * An array describing the JSON-path into the execution response which\r\n   * corresponds to this error. Only included for errors during execution.\r\n   *\r\n   * Enumerable, and appears in the result of JSON.stringify().\r\n   */\n\n  /**\r\n   * An array of GraphQL AST Nodes corresponding to this error.\r\n   */\n\n  /**\r\n   * The source GraphQL document for the first location of this error.\r\n   *\r\n   * Note that if this Error represents more than one node, the source may not\r\n   * represent nodes after the first node.\r\n   */\n\n  /**\r\n   * An array of character offsets within the source GraphQL document\r\n   * which correspond to this error.\r\n   */\n\n  /**\r\n   * The original error thrown from a field resolver during execution.\r\n   */\n\n  /**\r\n   * Extension fields to add to the formatted error.\r\n   */\n\n  /**\r\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\r\n   */\n  constructor(message) {\n    var _this$nodes, _nodeLocations$, _ref;\n    for (var _len = arguments.length, rawArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rawArgs[_key - 1] = arguments[_key];\n    }\n    const {\n      nodes,\n      source,\n      positions,\n      path,\n      originalError,\n      extensions\n    } = toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError = originalError !== null && originalError !== void 0 ? originalError : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined);\n    const nodeLocations = undefinedIfEmpty((_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map(node => node.loc).filter(loc => loc != null)); // Compute locations in the source for the given nodes/positions.\n\n    this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;\n    this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(loc => loc.start);\n    this.locations = positions && source ? positions.map(pos => getLocation(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(loc => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(originalError === null || originalError === void 0 ? void 0 : originalError.extensions) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : undefined;\n    this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true\n      },\n      name: {\n        enumerable: false\n      },\n      nodes: {\n        enumerable: false\n      },\n      source: {\n        enumerable: false\n      },\n      positions: {\n        enumerable: false\n      },\n      originalError: {\n        enumerable: false\n      }\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (originalError !== null && originalError !== void 0 && originalError.stack) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n  toString() {\n    let output = this.message;\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n    return output;\n  }\n  toJSON() {\n    const formattedError = {\n      message: this.message\n    };\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n    return formattedError;\n  }\n}\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\r\n * See: https://spec.graphql.org/draft/#sec-Errors\r\n */\n\n/**\r\n * Prints a GraphQLError to a string, representing useful location information\r\n * about the error's position in the source.\r\n *\r\n * @deprecated Please use `error.toString` instead. Will be removed in v17\r\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\r\n * Given a GraphQLError, format it according to the rules described by the\r\n * Response Format, Errors section of the GraphQL Specification.\r\n *\r\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\r\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}","map":{"version":3,"names":["isObjectLike","getLocation","printLocation","printSourceLocation","toNormalizedOptions","args","firstArg","nodes","source","positions","path","originalError","extensions","GraphQLError","Error","constructor","message","_this$nodes","_nodeLocations$","_ref","_len","arguments","length","rawArgs","Array","_key","name","undefined","undefinedIfEmpty","isArray","nodeLocations","map","node","loc","filter","start","locations","pos","originalExtensions","Object","create","defineProperties","writable","enumerable","stack","defineProperty","value","configurable","captureStackTrace","Symbol","toStringTag","toString","output","location","toJSON","formattedError","keys","array","printError","error","formatError"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/graphql/error/GraphQLError.mjs"],"sourcesContent":["import { isObjectLike } from '../jsutils/isObjectLike.mjs';\r\nimport { getLocation } from '../language/location.mjs';\r\nimport {\r\n  printLocation,\r\n  printSourceLocation,\r\n} from '../language/printLocation.mjs';\r\n\r\nfunction toNormalizedOptions(args) {\r\n  const firstArg = args[0];\r\n\r\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\r\n    return {\r\n      nodes: firstArg,\r\n      source: args[1],\r\n      positions: args[2],\r\n      path: args[3],\r\n      originalError: args[4],\r\n      extensions: args[5],\r\n    };\r\n  }\r\n\r\n  return firstArg;\r\n}\r\n/**\r\n * A GraphQLError describes an Error found during the parse, validate, or\r\n * execute phases of performing a GraphQL operation. In addition to a message\r\n * and stack trace, it also includes information about the locations in a\r\n * GraphQL document and/or execution result that correspond to the Error.\r\n */\r\n\r\nexport class GraphQLError extends Error {\r\n  /**\r\n   * An array of `{ line, column }` locations within the source GraphQL document\r\n   * which correspond to this error.\r\n   *\r\n   * Errors during validation often contain multiple locations, for example to\r\n   * point out two things with the same name. Errors during execution include a\r\n   * single location, the field which produced the error.\r\n   *\r\n   * Enumerable, and appears in the result of JSON.stringify().\r\n   */\r\n\r\n  /**\r\n   * An array describing the JSON-path into the execution response which\r\n   * corresponds to this error. Only included for errors during execution.\r\n   *\r\n   * Enumerable, and appears in the result of JSON.stringify().\r\n   */\r\n\r\n  /**\r\n   * An array of GraphQL AST Nodes corresponding to this error.\r\n   */\r\n\r\n  /**\r\n   * The source GraphQL document for the first location of this error.\r\n   *\r\n   * Note that if this Error represents more than one node, the source may not\r\n   * represent nodes after the first node.\r\n   */\r\n\r\n  /**\r\n   * An array of character offsets within the source GraphQL document\r\n   * which correspond to this error.\r\n   */\r\n\r\n  /**\r\n   * The original error thrown from a field resolver during execution.\r\n   */\r\n\r\n  /**\r\n   * Extension fields to add to the formatted error.\r\n   */\r\n\r\n  /**\r\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\r\n   */\r\n  constructor(message, ...rawArgs) {\r\n    var _this$nodes, _nodeLocations$, _ref;\r\n\r\n    const { nodes, source, positions, path, originalError, extensions } =\r\n      toNormalizedOptions(rawArgs);\r\n    super(message);\r\n    this.name = 'GraphQLError';\r\n    this.path = path !== null && path !== void 0 ? path : undefined;\r\n    this.originalError =\r\n      originalError !== null && originalError !== void 0\r\n        ? originalError\r\n        : undefined; // Compute list of blame nodes.\r\n\r\n    this.nodes = undefinedIfEmpty(\r\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\r\n    );\r\n    const nodeLocations = undefinedIfEmpty(\r\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\r\n        ? void 0\r\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\r\n    ); // Compute locations in the source for the given nodes/positions.\r\n\r\n    this.source =\r\n      source !== null && source !== void 0\r\n        ? source\r\n        : nodeLocations === null || nodeLocations === void 0\r\n        ? void 0\r\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\r\n          _nodeLocations$ === void 0\r\n        ? void 0\r\n        : _nodeLocations$.source;\r\n    this.positions =\r\n      positions !== null && positions !== void 0\r\n        ? positions\r\n        : nodeLocations === null || nodeLocations === void 0\r\n        ? void 0\r\n        : nodeLocations.map((loc) => loc.start);\r\n    this.locations =\r\n      positions && source\r\n        ? positions.map((pos) => getLocation(source, pos))\r\n        : nodeLocations === null || nodeLocations === void 0\r\n        ? void 0\r\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\r\n    const originalExtensions = isObjectLike(\r\n      originalError === null || originalError === void 0\r\n        ? void 0\r\n        : originalError.extensions,\r\n    )\r\n      ? originalError === null || originalError === void 0\r\n        ? void 0\r\n        : originalError.extensions\r\n      : undefined;\r\n    this.extensions =\r\n      (_ref =\r\n        extensions !== null && extensions !== void 0\r\n          ? extensions\r\n          : originalExtensions) !== null && _ref !== void 0\r\n        ? _ref\r\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\r\n    // Keep the rest as non-enumerable.\r\n\r\n    Object.defineProperties(this, {\r\n      message: {\r\n        writable: true,\r\n        enumerable: true,\r\n      },\r\n      name: {\r\n        enumerable: false,\r\n      },\r\n      nodes: {\r\n        enumerable: false,\r\n      },\r\n      source: {\r\n        enumerable: false,\r\n      },\r\n      positions: {\r\n        enumerable: false,\r\n      },\r\n      originalError: {\r\n        enumerable: false,\r\n      },\r\n    }); // Include (non-enumerable) stack trace.\r\n\r\n    /* c8 ignore start */\r\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\r\n\r\n    if (\r\n      originalError !== null &&\r\n      originalError !== void 0 &&\r\n      originalError.stack\r\n    ) {\r\n      Object.defineProperty(this, 'stack', {\r\n        value: originalError.stack,\r\n        writable: true,\r\n        configurable: true,\r\n      });\r\n    } else if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, GraphQLError);\r\n    } else {\r\n      Object.defineProperty(this, 'stack', {\r\n        value: Error().stack,\r\n        writable: true,\r\n        configurable: true,\r\n      });\r\n    }\r\n    /* c8 ignore stop */\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLError';\r\n  }\r\n\r\n  toString() {\r\n    let output = this.message;\r\n\r\n    if (this.nodes) {\r\n      for (const node of this.nodes) {\r\n        if (node.loc) {\r\n          output += '\\n\\n' + printLocation(node.loc);\r\n        }\r\n      }\r\n    } else if (this.source && this.locations) {\r\n      for (const location of this.locations) {\r\n        output += '\\n\\n' + printSourceLocation(this.source, location);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  toJSON() {\r\n    const formattedError = {\r\n      message: this.message,\r\n    };\r\n\r\n    if (this.locations != null) {\r\n      formattedError.locations = this.locations;\r\n    }\r\n\r\n    if (this.path != null) {\r\n      formattedError.path = this.path;\r\n    }\r\n\r\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\r\n      formattedError.extensions = this.extensions;\r\n    }\r\n\r\n    return formattedError;\r\n  }\r\n}\r\n\r\nfunction undefinedIfEmpty(array) {\r\n  return array === undefined || array.length === 0 ? undefined : array;\r\n}\r\n/**\r\n * See: https://spec.graphql.org/draft/#sec-Errors\r\n */\r\n\r\n/**\r\n * Prints a GraphQLError to a string, representing useful location information\r\n * about the error's position in the source.\r\n *\r\n * @deprecated Please use `error.toString` instead. Will be removed in v17\r\n */\r\nexport function printError(error) {\r\n  return error.toString();\r\n}\r\n/**\r\n * Given a GraphQLError, format it according to the rules described by the\r\n * Response Format, Errors section of the GraphQL Specification.\r\n *\r\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\r\n */\r\n\r\nexport function formatError(error) {\r\n  return error.toJSON();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}