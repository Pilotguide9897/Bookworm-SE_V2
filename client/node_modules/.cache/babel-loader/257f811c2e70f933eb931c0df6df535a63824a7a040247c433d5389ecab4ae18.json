{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\r\n * Executable definitions\r\n *\r\n * A GraphQL document is only valid for execution if all definitions are either\r\n * operation or fragment definitions.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\r\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document: function Document(node) {\n      var _iterator = _createForOfIteratorHelper(node.definitions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var definition = _step.value;\n          if (!isExecutableDefinitionNode(definition)) {\n            var defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n            context.reportError(new GraphQLError(\"The \".concat(defName, \" definition is not executable.\"), {\n              nodes: definition\n            }));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","Kind","isExecutableDefinitionNode","ExecutableDefinitionsRule","context","Document","node","_iterator","_createForOfIteratorHelper","definitions","_step","s","n","done","definition","value","defName","kind","SCHEMA_DEFINITION","SCHEMA_EXTENSION","name","reportError","concat","nodes","err","e","f"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { Kind } from '../../language/kinds.mjs';\r\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\r\n\r\n/**\r\n * Executable definitions\r\n *\r\n * A GraphQL document is only valid for execution if all definitions are either\r\n * operation or fragment definitions.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\r\n */\r\nexport function ExecutableDefinitionsRule(context) {\r\n  return {\r\n    Document(node) {\r\n      for (const definition of node.definitions) {\r\n        if (!isExecutableDefinitionNode(definition)) {\r\n          const defName =\r\n            definition.kind === Kind.SCHEMA_DEFINITION ||\r\n            definition.kind === Kind.SCHEMA_EXTENSION\r\n              ? 'schema'\r\n              : '\"' + definition.name.value + '\"';\r\n          context.reportError(\r\n            new GraphQLError(`The ${defName} definition is not executable.`, {\r\n              nodes: definition,\r\n            }),\r\n          );\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n  };\r\n}\r\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,IAAI,QAAQ,0BAA0B;AAC/C,SAASC,0BAA0B,QAAQ,+BAA+B;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAACC,OAAO,EAAE;EACjD,OAAO;IACLC,QAAQ,WAAAA,SAACC,IAAI,EAAE;MAAA,IAAAC,SAAA,GAAAC,0BAAA,CACYF,IAAI,CAACG,WAAW;QAAAC,KAAA;MAAA;QAAzC,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,GAA2C;UAAA,IAAhCC,UAAU,GAAAJ,KAAA,CAAAK,KAAA;UACnB,IAAI,CAACb,0BAA0B,CAACY,UAAU,CAAC,EAAE;YAC3C,IAAME,OAAO,GACXF,UAAU,CAACG,IAAI,KAAKhB,IAAI,CAACiB,iBAAiB,IAC1CJ,UAAU,CAACG,IAAI,KAAKhB,IAAI,CAACkB,gBAAgB,GACrC,QAAQ,GACR,GAAG,GAAGL,UAAU,CAACM,IAAI,CAACL,KAAK,GAAG,GAAG;YACvCX,OAAO,CAACiB,WAAW,CACjB,IAAIrB,YAAY,QAAAsB,MAAA,CAAQN,OAAO,qCAAkC;cAC/DO,KAAK,EAAET;YACT,CAAC,CACH,CAAC;UACH;QACF;MAAC,SAAAU,GAAA;QAAAjB,SAAA,CAAAkB,CAAA,CAAAD,GAAA;MAAA;QAAAjB,SAAA,CAAAmB,CAAA;MAAA;MAED,OAAO,KAAK;IACd;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}