{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\r\n * Possible fragment spread\r\n *\r\n * A fragment spread is only valid if the type condition could ever possibly\r\n * be true: if there is a non-empty intersection of the possible parent types,\r\n * and possible types which pass the type condition.\r\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment cannot be spread here as objects of type \\\"\".concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), {\n          nodes: node\n        }));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of type \\\"\").concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), {\n          nodes: node\n        }));\n      }\n    }\n  };\n}\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}","map":{"version":3,"names":["inspect","GraphQLError","isCompositeType","doTypesOverlap","typeFromAST","PossibleFragmentSpreadsRule","context","InlineFragment","node","fragType","getType","parentType","getParentType","getSchema","parentTypeStr","fragTypeStr","reportError","concat","nodes","FragmentSpread","fragName","name","value","getFragmentType","frag","getFragment","type","typeCondition"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\r\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { isCompositeType } from '../../type/definition.mjs';\r\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\r\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\r\n\r\n/**\r\n * Possible fragment spread\r\n *\r\n * A fragment spread is only valid if the type condition could ever possibly\r\n * be true: if there is a non-empty intersection of the possible parent types,\r\n * and possible types which pass the type condition.\r\n */\r\nexport function PossibleFragmentSpreadsRule(context) {\r\n  return {\r\n    InlineFragment(node) {\r\n      const fragType = context.getType();\r\n      const parentType = context.getParentType();\r\n\r\n      if (\r\n        isCompositeType(fragType) &&\r\n        isCompositeType(parentType) &&\r\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\r\n      ) {\r\n        const parentTypeStr = inspect(parentType);\r\n        const fragTypeStr = inspect(fragType);\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\r\n            {\r\n              nodes: node,\r\n            },\r\n          ),\r\n        );\r\n      }\r\n    },\r\n\r\n    FragmentSpread(node) {\r\n      const fragName = node.name.value;\r\n      const fragType = getFragmentType(context, fragName);\r\n      const parentType = context.getParentType();\r\n\r\n      if (\r\n        fragType &&\r\n        parentType &&\r\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\r\n      ) {\r\n        const parentTypeStr = inspect(parentType);\r\n        const fragTypeStr = inspect(fragType);\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\r\n            {\r\n              nodes: node,\r\n            },\r\n          ),\r\n        );\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nfunction getFragmentType(context, name) {\r\n  const frag = context.getFragment(name);\r\n\r\n  if (frag) {\r\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\r\n\r\n    if (isCompositeType(type)) {\r\n      return type;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,cAAc,QAAQ,qCAAqC;AACpE,SAASC,WAAW,QAAQ,iCAAiC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,2BAA2BA,CAACC,OAAO,EAAE;EACnD,OAAO;IACLC,cAAc,WAAAA,eAACC,IAAI,EAAE;MACnB,IAAMC,QAAQ,GAAGH,OAAO,CAACI,OAAO,CAAC,CAAC;MAClC,IAAMC,UAAU,GAAGL,OAAO,CAACM,aAAa,CAAC,CAAC;MAE1C,IACEV,eAAe,CAACO,QAAQ,CAAC,IACzBP,eAAe,CAACS,UAAU,CAAC,IAC3B,CAACR,cAAc,CAACG,OAAO,CAACO,SAAS,CAAC,CAAC,EAAEJ,QAAQ,EAAEE,UAAU,CAAC,EAC1D;QACA,IAAMG,aAAa,GAAGd,OAAO,CAACW,UAAU,CAAC;QACzC,IAAMI,WAAW,GAAGf,OAAO,CAACS,QAAQ,CAAC;QACrCH,OAAO,CAACU,WAAW,CACjB,IAAIf,YAAY,wDAAAgB,MAAA,CACwCH,aAAa,gCAAAG,MAAA,CAA2BF,WAAW,UACzG;UACEG,KAAK,EAAEV;QACT,CACF,CACF,CAAC;MACH;IACF,CAAC;IAEDW,cAAc,WAAAA,eAACX,IAAI,EAAE;MACnB,IAAMY,QAAQ,GAAGZ,IAAI,CAACa,IAAI,CAACC,KAAK;MAChC,IAAMb,QAAQ,GAAGc,eAAe,CAACjB,OAAO,EAAEc,QAAQ,CAAC;MACnD,IAAMT,UAAU,GAAGL,OAAO,CAACM,aAAa,CAAC,CAAC;MAE1C,IACEH,QAAQ,IACRE,UAAU,IACV,CAACR,cAAc,CAACG,OAAO,CAACO,SAAS,CAAC,CAAC,EAAEJ,QAAQ,EAAEE,UAAU,CAAC,EAC1D;QACA,IAAMG,aAAa,GAAGd,OAAO,CAACW,UAAU,CAAC;QACzC,IAAMI,WAAW,GAAGf,OAAO,CAACS,QAAQ,CAAC;QACrCH,OAAO,CAACU,WAAW,CACjB,IAAIf,YAAY,eAAAgB,MAAA,CACDG,QAAQ,oDAAAH,MAAA,CAA+CH,aAAa,gCAAAG,MAAA,CAA2BF,WAAW,UACvH;UACEG,KAAK,EAAEV;QACT,CACF,CACF,CAAC;MACH;IACF;EACF,CAAC;AACH;AAEA,SAASe,eAAeA,CAACjB,OAAO,EAAEe,IAAI,EAAE;EACtC,IAAMG,IAAI,GAAGlB,OAAO,CAACmB,WAAW,CAACJ,IAAI,CAAC;EAEtC,IAAIG,IAAI,EAAE;IACR,IAAME,IAAI,GAAGtB,WAAW,CAACE,OAAO,CAACO,SAAS,CAAC,CAAC,EAAEW,IAAI,CAACG,aAAa,CAAC;IAEjE,IAAIzB,eAAe,CAACwB,IAAI,CAAC,EAAE;MACzB,OAAOA,IAAI;IACb;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}