{"ast":null,"code":"import _objectSpread from \"C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\r\n * Produce the GraphQL query recommended for a full schema introspection.\r\n * Accepts optional IntrospectionOptions.\r\n */\nexport function getIntrospectionQuery(options) {\n  var optionsWithDefault = _objectSpread({\n    descriptions: true,\n    specifiedByUrl: false,\n    directiveIsRepeatable: false,\n    schemaDescription: false,\n    inputValueDeprecation: false\n  }, options);\n  var descriptions = optionsWithDefault.descriptions ? 'description' : '';\n  var specifiedByUrl = optionsWithDefault.specifiedByUrl ? 'specifiedByURL' : '';\n  var directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? 'isRepeatable' : '';\n  var schemaDescription = optionsWithDefault.schemaDescription ? descriptions : '';\n  function inputDeprecation(str) {\n    return optionsWithDefault.inputValueDeprecation ? str : '';\n  }\n  return \"\\n    query IntrospectionQuery {\\n      __schema {\\n        \".concat(schemaDescription, \"\\n        queryType { name }\\n        mutationType { name }\\n        subscriptionType { name }\\n        types {\\n          ...FullType\\n        }\\n        directives {\\n          name\\n          \").concat(descriptions, \"\\n          \").concat(directiveIsRepeatable, \"\\n          locations\\n          args\").concat(inputDeprecation('(includeDeprecated: true)'), \" {\\n            ...InputValue\\n          }\\n        }\\n      }\\n    }\\n\\n    fragment FullType on __Type {\\n      kind\\n      name\\n      \").concat(descriptions, \"\\n      \").concat(specifiedByUrl, \"\\n      fields(includeDeprecated: true) {\\n        name\\n        \").concat(descriptions, \"\\n        args\").concat(inputDeprecation('(includeDeprecated: true)'), \" {\\n          ...InputValue\\n        }\\n        type {\\n          ...TypeRef\\n        }\\n        isDeprecated\\n        deprecationReason\\n      }\\n      inputFields\").concat(inputDeprecation('(includeDeprecated: true)'), \" {\\n        ...InputValue\\n      }\\n      interfaces {\\n        ...TypeRef\\n      }\\n      enumValues(includeDeprecated: true) {\\n        name\\n        \").concat(descriptions, \"\\n        isDeprecated\\n        deprecationReason\\n      }\\n      possibleTypes {\\n        ...TypeRef\\n      }\\n    }\\n\\n    fragment InputValue on __InputValue {\\n      name\\n      \").concat(descriptions, \"\\n      type { ...TypeRef }\\n      defaultValue\\n      \").concat(inputDeprecation('isDeprecated'), \"\\n      \").concat(inputDeprecation('deprecationReason'), \"\\n    }\\n\\n    fragment TypeRef on __Type {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n                ofType {\\n                  kind\\n                  name\\n                  ofType {\\n                    kind\\n                    name\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \");\n}","map":{"version":3,"names":["getIntrospectionQuery","options","optionsWithDefault","_objectSpread","descriptions","specifiedByUrl","directiveIsRepeatable","schemaDescription","inputValueDeprecation","inputDeprecation","str","concat"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/graphql/utilities/getIntrospectionQuery.mjs"],"sourcesContent":["/**\r\n * Produce the GraphQL query recommended for a full schema introspection.\r\n * Accepts optional IntrospectionOptions.\r\n */\r\nexport function getIntrospectionQuery(options) {\r\n  const optionsWithDefault = {\r\n    descriptions: true,\r\n    specifiedByUrl: false,\r\n    directiveIsRepeatable: false,\r\n    schemaDescription: false,\r\n    inputValueDeprecation: false,\r\n    ...options,\r\n  };\r\n  const descriptions = optionsWithDefault.descriptions ? 'description' : '';\r\n  const specifiedByUrl = optionsWithDefault.specifiedByUrl\r\n    ? 'specifiedByURL'\r\n    : '';\r\n  const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable\r\n    ? 'isRepeatable'\r\n    : '';\r\n  const schemaDescription = optionsWithDefault.schemaDescription\r\n    ? descriptions\r\n    : '';\r\n\r\n  function inputDeprecation(str) {\r\n    return optionsWithDefault.inputValueDeprecation ? str : '';\r\n  }\r\n\r\n  return `\r\n    query IntrospectionQuery {\r\n      __schema {\r\n        ${schemaDescription}\r\n        queryType { name }\r\n        mutationType { name }\r\n        subscriptionType { name }\r\n        types {\r\n          ...FullType\r\n        }\r\n        directives {\r\n          name\r\n          ${descriptions}\r\n          ${directiveIsRepeatable}\r\n          locations\r\n          args${inputDeprecation('(includeDeprecated: true)')} {\r\n            ...InputValue\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    fragment FullType on __Type {\r\n      kind\r\n      name\r\n      ${descriptions}\r\n      ${specifiedByUrl}\r\n      fields(includeDeprecated: true) {\r\n        name\r\n        ${descriptions}\r\n        args${inputDeprecation('(includeDeprecated: true)')} {\r\n          ...InputValue\r\n        }\r\n        type {\r\n          ...TypeRef\r\n        }\r\n        isDeprecated\r\n        deprecationReason\r\n      }\r\n      inputFields${inputDeprecation('(includeDeprecated: true)')} {\r\n        ...InputValue\r\n      }\r\n      interfaces {\r\n        ...TypeRef\r\n      }\r\n      enumValues(includeDeprecated: true) {\r\n        name\r\n        ${descriptions}\r\n        isDeprecated\r\n        deprecationReason\r\n      }\r\n      possibleTypes {\r\n        ...TypeRef\r\n      }\r\n    }\r\n\r\n    fragment InputValue on __InputValue {\r\n      name\r\n      ${descriptions}\r\n      type { ...TypeRef }\r\n      defaultValue\r\n      ${inputDeprecation('isDeprecated')}\r\n      ${inputDeprecation('deprecationReason')}\r\n    }\r\n\r\n    fragment TypeRef on __Type {\r\n      kind\r\n      name\r\n      ofType {\r\n        kind\r\n        name\r\n        ofType {\r\n          kind\r\n          name\r\n          ofType {\r\n            kind\r\n            name\r\n            ofType {\r\n              kind\r\n              name\r\n              ofType {\r\n                kind\r\n                name\r\n                ofType {\r\n                  kind\r\n                  name\r\n                  ofType {\r\n                    kind\r\n                    name\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,qBAAqBA,CAACC,OAAO,EAAE;EAC7C,IAAMC,kBAAkB,GAAAC,aAAA;IACtBC,YAAY,EAAE,IAAI;IAClBC,cAAc,EAAE,KAAK;IACrBC,qBAAqB,EAAE,KAAK;IAC5BC,iBAAiB,EAAE,KAAK;IACxBC,qBAAqB,EAAE;EAAK,GACzBP,OAAO,CACX;EACD,IAAMG,YAAY,GAAGF,kBAAkB,CAACE,YAAY,GAAG,aAAa,GAAG,EAAE;EACzE,IAAMC,cAAc,GAAGH,kBAAkB,CAACG,cAAc,GACpD,gBAAgB,GAChB,EAAE;EACN,IAAMC,qBAAqB,GAAGJ,kBAAkB,CAACI,qBAAqB,GAClE,cAAc,GACd,EAAE;EACN,IAAMC,iBAAiB,GAAGL,kBAAkB,CAACK,iBAAiB,GAC1DH,YAAY,GACZ,EAAE;EAEN,SAASK,gBAAgBA,CAACC,GAAG,EAAE;IAC7B,OAAOR,kBAAkB,CAACM,qBAAqB,GAAGE,GAAG,GAAG,EAAE;EAC5D;EAEA,sEAAAC,MAAA,CAGQJ,iBAAiB,yMAAAI,MAAA,CASfP,YAAY,kBAAAO,MAAA,CACZL,qBAAqB,2CAAAK,MAAA,CAEjBF,gBAAgB,CAAC,2BAA2B,CAAC,gJAAAE,MAAA,CAUrDP,YAAY,cAAAO,MAAA,CACZN,cAAc,uEAAAM,MAAA,CAGZP,YAAY,oBAAAO,MAAA,CACRF,gBAAgB,CAAC,2BAA2B,CAAC,0KAAAE,MAAA,CASxCF,gBAAgB,CAAC,2BAA2B,CAAC,8JAAAE,MAAA,CAQtDP,YAAY,4LAAAO,MAAA,CAWdP,YAAY,6DAAAO,MAAA,CAGZF,gBAAgB,CAAC,cAAc,CAAC,cAAAE,MAAA,CAChCF,gBAAgB,CAAC,mBAAmB,CAAC;AAoC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}