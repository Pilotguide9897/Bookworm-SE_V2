{"ast":null,"code":"import _toConsumableArray from \"C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isTypeDefinitionNode, isTypeSystemDefinitionNode, isTypeSystemExtensionNode } from '../../language/predicates.mjs';\nimport { introspectionTypes } from '../../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\n\n/**\r\n * Known type names\r\n *\r\n * A GraphQL document is only valid if referenced types (specifically\r\n * variable definitions and fragment conditions) are defined by the type schema.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\r\n */\nexport function KnownTypeNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  var definedTypes = Object.create(null);\n  var _iterator = _createForOfIteratorHelper(context.getDocument().definitions),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var def = _step.value;\n      if (isTypeDefinitionNode(def)) {\n        definedTypes[def.name.value] = true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var typeNames = [].concat(_toConsumableArray(Object.keys(existingTypesMap)), _toConsumableArray(Object.keys(definedTypes)));\n  return {\n    NamedType: function NamedType(node, _1, parent, _2, ancestors) {\n      var typeName = node.name.value;\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n        var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;\n        var isSDL = definitionNode != null && isSDLNode(definitionNode);\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n        var suggestedTypes = suggestionList(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);\n        context.reportError(new GraphQLError(\"Unknown type \\\"\".concat(typeName, \"\\\".\") + didYouMean(suggestedTypes), {\n          nodes: node\n        }));\n      }\n    }\n  };\n}\nvar standardTypeNames = [].concat(_toConsumableArray(specifiedScalarTypes), _toConsumableArray(introspectionTypes)).map(function (type) {\n  return type.name;\n});\nfunction isSDLNode(value) {\n  return 'kind' in value && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value));\n}","map":{"version":3,"names":["didYouMean","suggestionList","GraphQLError","isTypeDefinitionNode","isTypeSystemDefinitionNode","isTypeSystemExtensionNode","introspectionTypes","specifiedScalarTypes","KnownTypeNamesRule","context","schema","getSchema","existingTypesMap","getTypeMap","Object","create","definedTypes","_iterator","_createForOfIteratorHelper","getDocument","definitions","_step","s","n","done","def","value","name","err","e","f","typeNames","concat","_toConsumableArray","keys","NamedType","node","_1","parent","_2","ancestors","typeName","_ancestors$","definitionNode","isSDL","isSDLNode","standardTypeNames","includes","suggestedTypes","reportError","nodes","map","type"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs"],"sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\r\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\r\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport {\r\n  isTypeDefinitionNode,\r\n  isTypeSystemDefinitionNode,\r\n  isTypeSystemExtensionNode,\r\n} from '../../language/predicates.mjs';\r\nimport { introspectionTypes } from '../../type/introspection.mjs';\r\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\r\n\r\n/**\r\n * Known type names\r\n *\r\n * A GraphQL document is only valid if referenced types (specifically\r\n * variable definitions and fragment conditions) are defined by the type schema.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\r\n */\r\nexport function KnownTypeNamesRule(context) {\r\n  const schema = context.getSchema();\r\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\r\n  const definedTypes = Object.create(null);\r\n\r\n  for (const def of context.getDocument().definitions) {\r\n    if (isTypeDefinitionNode(def)) {\r\n      definedTypes[def.name.value] = true;\r\n    }\r\n  }\r\n\r\n  const typeNames = [\r\n    ...Object.keys(existingTypesMap),\r\n    ...Object.keys(definedTypes),\r\n  ];\r\n  return {\r\n    NamedType(node, _1, parent, _2, ancestors) {\r\n      const typeName = node.name.value;\r\n\r\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\r\n        var _ancestors$;\r\n\r\n        const definitionNode =\r\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\r\n            ? _ancestors$\r\n            : parent;\r\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\r\n\r\n        if (isSDL && standardTypeNames.includes(typeName)) {\r\n          return;\r\n        }\r\n\r\n        const suggestedTypes = suggestionList(\r\n          typeName,\r\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\r\n        );\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Unknown type \"${typeName}\".` + didYouMean(suggestedTypes),\r\n            {\r\n              nodes: node,\r\n            },\r\n          ),\r\n        );\r\n      }\r\n    },\r\n  };\r\n}\r\nconst standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(\r\n  (type) => type.name,\r\n);\r\n\r\nfunction isSDLNode(value) {\r\n  return (\r\n    'kind' in value &&\r\n    (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value))\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}