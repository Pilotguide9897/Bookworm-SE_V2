{"ast":null,"code":"import _slicedToArray from \"C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\r\n * A visitor is provided to visit, it contains the collection of\r\n * relevant functions to be called during the visitor's traversal.\r\n */\n\nexport var BREAK = Object.freeze({});\n/**\r\n * visit() will walk through an AST using a depth-first traversal, calling\r\n * the visitor's enter function at each node in the traversal, and calling the\r\n * leave function after visiting that node and all of its child nodes.\r\n *\r\n * By returning different values from the enter and leave functions, the\r\n * behavior of the visitor can be altered, including skipping over a sub-tree of\r\n * the AST (by returning false), editing the AST by returning a value or null\r\n * to remove the value, or to stop the whole traversal by returning BREAK.\r\n *\r\n * When using visit() to edit an AST, the original AST will not be modified, and\r\n * a new version of the AST with the changes applied will be returned from the\r\n * visit function.\r\n *\r\n * ```ts\r\n * const editedAST = visit(ast, {\r\n *   enter(node, key, parent, path, ancestors) {\r\n *     // @return\r\n *     //   undefined: no action\r\n *     //   false: skip visiting this node\r\n *     //   visitor.BREAK: stop visiting altogether\r\n *     //   null: delete this node\r\n *     //   any value: replace this node with the returned value\r\n *   },\r\n *   leave(node, key, parent, path, ancestors) {\r\n *     // @return\r\n *     //   undefined: no action\r\n *     //   false: no action\r\n *     //   visitor.BREAK: stop visiting altogether\r\n *     //   null: delete this node\r\n *     //   any value: replace this node with the returned value\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * Alternatively to providing enter() and leave() functions, a visitor can\r\n * instead provide functions named the same as the kinds of AST nodes, or\r\n * enter/leave visitors at a named key, leading to three permutations of the\r\n * visitor API:\r\n *\r\n * 1) Named visitors triggered when entering a node of a specific kind.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   Kind(node) {\r\n *     // enter the \"Kind\" node\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   Kind: {\r\n *     enter(node) {\r\n *       // enter the \"Kind\" node\r\n *     }\r\n *     leave(node) {\r\n *       // leave the \"Kind\" node\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * 3) Generic visitors that trigger upon entering and leaving any node.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   enter(node) {\r\n *     // enter any node\r\n *   },\r\n *   leave(node) {\r\n *     // leave any node\r\n *   }\r\n * })\r\n * ```\r\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n  var enterLeaveMap = new Map();\n  for (var _i = 0, _Object$values = Object.values(Kind); _i < _Object$values.length; _i++) {\n    var kind = _Object$values[_i];\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = root;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          var editOffset = 0;\n          var _iterator = _createForOfIteratorHelper(edits),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _step$value = _slicedToArray(_step.value, 2),\n                editKey = _step$value[0],\n                editValue = _step$value[1];\n              var arrayKey = editKey - editOffset;\n              if (editValue === null) {\n                node.splice(arrayKey, 1);\n                editOffset++;\n              } else {\n                node[arrayKey] = editValue;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else {\n          node = Object.defineProperties({}, Object.getOwnPropertyDescriptors(node));\n          var _iterator2 = _createForOfIteratorHelper(edits),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _step2$value = _slicedToArray(_step2.value, 2),\n                _editKey = _step2$value[0],\n                _editValue = _step2$value[1];\n              node[_editKey] = _editValue;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n      if (node === null || node === undefined) {\n        continue;\n      }\n      path.push(key);\n    }\n    var result = void 0;\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n      isNode(node) || devAssert(false, \"Invalid AST Node: \".concat(inspect(node), \".\"));\n      var visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;\n      result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path, ancestors);\n      if (result === BREAK) {\n        break;\n      }\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];\n      index = -1;\n      edits = [];\n      if (parent) {\n        ancestors.push(parent);\n      }\n      parent = node;\n    }\n  } while (stack !== undefined);\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n  return root;\n}\n/**\r\n * Creates a new visitor instance which delegates to many visitors to run in\r\n * parallel. Each visitor will be visited for each node before moving on.\r\n *\r\n * If a prior visitor edits a node, no following visitors will see that node.\r\n */\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length).fill(null);\n  var mergedVisitor = Object.create(null);\n  var _loop = function _loop() {\n    var kind = _Object$values2[_i2];\n    var hasVisitor = false;\n    var enterList = new Array(visitors.length).fill(undefined);\n    var leaveList = new Array(visitors.length).fill(undefined);\n    for (var i = 0; i < visitors.length; ++i) {\n      var _getEnterLeaveForKind = getEnterLeaveForKind(visitors[i], kind),\n        enter = _getEnterLeaveForKind.enter,\n        leave = _getEnterLeaveForKind.leave;\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n    if (!hasVisitor) {\n      return \"continue\";\n    }\n    var mergedEnterLeave = {\n      enter: function enter() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        var node = args[0];\n        for (var _i3 = 0; _i3 < visitors.length; _i3++) {\n          if (skipping[_i3] === null) {\n            var _enterList$i;\n            var result = (_enterList$i = enterList[_i3]) === null || _enterList$i === void 0 ? void 0 : _enterList$i.apply(visitors[_i3], args);\n            if (result === false) {\n              skipping[_i3] = node;\n            } else if (result === BREAK) {\n              skipping[_i3] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n      leave: function leave() {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        var node = args[0];\n        for (var _i4 = 0; _i4 < visitors.length; _i4++) {\n          if (skipping[_i4] === null) {\n            var _leaveList$i;\n            var result = (_leaveList$i = leaveList[_i4]) === null || _leaveList$i === void 0 ? void 0 : _leaveList$i.apply(visitors[_i4], args);\n            if (result === BREAK) {\n              skipping[_i4] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[_i4] === node) {\n            skipping[_i4] = null;\n          }\n        }\n      }\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  };\n  for (var _i2 = 0, _Object$values2 = Object.values(Kind); _i2 < _Object$values2.length; _i2++) {\n    var _ret = _loop();\n    if (_ret === \"continue\") continue;\n  }\n  return mergedVisitor;\n}\n/**\r\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\r\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  var kindVisitor = visitor[kind];\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave\n  };\n}\n/**\r\n * Given a visitor instance, if it is leaving or not, and a node kind, return\r\n * the function the visitor runtime should call.\r\n *\r\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\r\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var _getEnterLeaveForKind2 = getEnterLeaveForKind(visitor, kind),\n    enter = _getEnterLeaveForKind2.enter,\n    leave = _getEnterLeaveForKind2.leave;\n  return isLeaving ? leave : enter;\n}","map":{"version":3,"names":["devAssert","inspect","isNode","QueryDocumentKeys","Kind","BREAK","Object","freeze","visit","root","visitor","visitorKeys","arguments","length","undefined","enterLeaveMap","Map","_i","_Object$values","values","kind","set","getEnterLeaveForKind","stack","inArray","Array","isArray","keys","index","edits","node","key","parent","path","ancestors","isLeaving","isEdited","pop","slice","editOffset","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","value","editKey","editValue","arrayKey","splice","err","e","f","defineProperties","getOwnPropertyDescriptors","_iterator2","_step2","_step2$value","prev","push","result","_enterLeaveMap$get","_enterLeaveMap$get2","concat","visitFn","get","leave","enter","call","_node$kind","visitInParallel","visitors","skipping","fill","mergedVisitor","create","_loop","_Object$values2","_i2","hasVisitor","enterList","leaveList","i","_getEnterLeaveForKind","mergedEnterLeave","_len","args","_key","_enterList$i","apply","_len2","_key2","_leaveList$i","_ret","kindVisitor","getVisitFn","_getEnterLeaveForKind2"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/graphql/language/visitor.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\r\nimport { inspect } from '../jsutils/inspect.mjs';\r\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\r\nimport { Kind } from './kinds.mjs';\r\n/**\r\n * A visitor is provided to visit, it contains the collection of\r\n * relevant functions to be called during the visitor's traversal.\r\n */\r\n\r\nexport const BREAK = Object.freeze({});\r\n/**\r\n * visit() will walk through an AST using a depth-first traversal, calling\r\n * the visitor's enter function at each node in the traversal, and calling the\r\n * leave function after visiting that node and all of its child nodes.\r\n *\r\n * By returning different values from the enter and leave functions, the\r\n * behavior of the visitor can be altered, including skipping over a sub-tree of\r\n * the AST (by returning false), editing the AST by returning a value or null\r\n * to remove the value, or to stop the whole traversal by returning BREAK.\r\n *\r\n * When using visit() to edit an AST, the original AST will not be modified, and\r\n * a new version of the AST with the changes applied will be returned from the\r\n * visit function.\r\n *\r\n * ```ts\r\n * const editedAST = visit(ast, {\r\n *   enter(node, key, parent, path, ancestors) {\r\n *     // @return\r\n *     //   undefined: no action\r\n *     //   false: skip visiting this node\r\n *     //   visitor.BREAK: stop visiting altogether\r\n *     //   null: delete this node\r\n *     //   any value: replace this node with the returned value\r\n *   },\r\n *   leave(node, key, parent, path, ancestors) {\r\n *     // @return\r\n *     //   undefined: no action\r\n *     //   false: no action\r\n *     //   visitor.BREAK: stop visiting altogether\r\n *     //   null: delete this node\r\n *     //   any value: replace this node with the returned value\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * Alternatively to providing enter() and leave() functions, a visitor can\r\n * instead provide functions named the same as the kinds of AST nodes, or\r\n * enter/leave visitors at a named key, leading to three permutations of the\r\n * visitor API:\r\n *\r\n * 1) Named visitors triggered when entering a node of a specific kind.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   Kind(node) {\r\n *     // enter the \"Kind\" node\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   Kind: {\r\n *     enter(node) {\r\n *       // enter the \"Kind\" node\r\n *     }\r\n *     leave(node) {\r\n *       // leave the \"Kind\" node\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * 3) Generic visitors that trigger upon entering and leaving any node.\r\n *\r\n * ```ts\r\n * visit(ast, {\r\n *   enter(node) {\r\n *     // enter any node\r\n *   },\r\n *   leave(node) {\r\n *     // leave any node\r\n *   }\r\n * })\r\n * ```\r\n */\r\n\r\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\r\n  const enterLeaveMap = new Map();\r\n\r\n  for (const kind of Object.values(Kind)) {\r\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\r\n  }\r\n  /* eslint-disable no-undef-init */\r\n\r\n  let stack = undefined;\r\n  let inArray = Array.isArray(root);\r\n  let keys = [root];\r\n  let index = -1;\r\n  let edits = [];\r\n  let node = root;\r\n  let key = undefined;\r\n  let parent = undefined;\r\n  const path = [];\r\n  const ancestors = [];\r\n  /* eslint-enable no-undef-init */\r\n\r\n  do {\r\n    index++;\r\n    const isLeaving = index === keys.length;\r\n    const isEdited = isLeaving && edits.length !== 0;\r\n\r\n    if (isLeaving) {\r\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\r\n      node = parent;\r\n      parent = ancestors.pop();\r\n\r\n      if (isEdited) {\r\n        if (inArray) {\r\n          node = node.slice();\r\n          let editOffset = 0;\r\n\r\n          for (const [editKey, editValue] of edits) {\r\n            const arrayKey = editKey - editOffset;\r\n\r\n            if (editValue === null) {\r\n              node.splice(arrayKey, 1);\r\n              editOffset++;\r\n            } else {\r\n              node[arrayKey] = editValue;\r\n            }\r\n          }\r\n        } else {\r\n          node = Object.defineProperties(\r\n            {},\r\n            Object.getOwnPropertyDescriptors(node),\r\n          );\r\n\r\n          for (const [editKey, editValue] of edits) {\r\n            node[editKey] = editValue;\r\n          }\r\n        }\r\n      }\r\n\r\n      index = stack.index;\r\n      keys = stack.keys;\r\n      edits = stack.edits;\r\n      inArray = stack.inArray;\r\n      stack = stack.prev;\r\n    } else if (parent) {\r\n      key = inArray ? index : keys[index];\r\n      node = parent[key];\r\n\r\n      if (node === null || node === undefined) {\r\n        continue;\r\n      }\r\n\r\n      path.push(key);\r\n    }\r\n\r\n    let result;\r\n\r\n    if (!Array.isArray(node)) {\r\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\r\n\r\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\r\n      const visitFn = isLeaving\r\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\r\n          _enterLeaveMap$get === void 0\r\n          ? void 0\r\n          : _enterLeaveMap$get.leave\r\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\r\n          _enterLeaveMap$get2 === void 0\r\n        ? void 0\r\n        : _enterLeaveMap$get2.enter;\r\n      result =\r\n        visitFn === null || visitFn === void 0\r\n          ? void 0\r\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\r\n\r\n      if (result === BREAK) {\r\n        break;\r\n      }\r\n\r\n      if (result === false) {\r\n        if (!isLeaving) {\r\n          path.pop();\r\n          continue;\r\n        }\r\n      } else if (result !== undefined) {\r\n        edits.push([key, result]);\r\n\r\n        if (!isLeaving) {\r\n          if (isNode(result)) {\r\n            node = result;\r\n          } else {\r\n            path.pop();\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (result === undefined && isEdited) {\r\n      edits.push([key, node]);\r\n    }\r\n\r\n    if (isLeaving) {\r\n      path.pop();\r\n    } else {\r\n      var _node$kind;\r\n\r\n      stack = {\r\n        inArray,\r\n        index,\r\n        keys,\r\n        edits,\r\n        prev: stack,\r\n      };\r\n      inArray = Array.isArray(node);\r\n      keys = inArray\r\n        ? node\r\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\r\n          _node$kind !== void 0\r\n        ? _node$kind\r\n        : [];\r\n      index = -1;\r\n      edits = [];\r\n\r\n      if (parent) {\r\n        ancestors.push(parent);\r\n      }\r\n\r\n      parent = node;\r\n    }\r\n  } while (stack !== undefined);\r\n\r\n  if (edits.length !== 0) {\r\n    // New root\r\n    return edits[edits.length - 1][1];\r\n  }\r\n\r\n  return root;\r\n}\r\n/**\r\n * Creates a new visitor instance which delegates to many visitors to run in\r\n * parallel. Each visitor will be visited for each node before moving on.\r\n *\r\n * If a prior visitor edits a node, no following visitors will see that node.\r\n */\r\n\r\nexport function visitInParallel(visitors) {\r\n  const skipping = new Array(visitors.length).fill(null);\r\n  const mergedVisitor = Object.create(null);\r\n\r\n  for (const kind of Object.values(Kind)) {\r\n    let hasVisitor = false;\r\n    const enterList = new Array(visitors.length).fill(undefined);\r\n    const leaveList = new Array(visitors.length).fill(undefined);\r\n\r\n    for (let i = 0; i < visitors.length; ++i) {\r\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\r\n      hasVisitor || (hasVisitor = enter != null || leave != null);\r\n      enterList[i] = enter;\r\n      leaveList[i] = leave;\r\n    }\r\n\r\n    if (!hasVisitor) {\r\n      continue;\r\n    }\r\n\r\n    const mergedEnterLeave = {\r\n      enter(...args) {\r\n        const node = args[0];\r\n\r\n        for (let i = 0; i < visitors.length; i++) {\r\n          if (skipping[i] === null) {\r\n            var _enterList$i;\r\n\r\n            const result =\r\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\r\n                ? void 0\r\n                : _enterList$i.apply(visitors[i], args);\r\n\r\n            if (result === false) {\r\n              skipping[i] = node;\r\n            } else if (result === BREAK) {\r\n              skipping[i] = BREAK;\r\n            } else if (result !== undefined) {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      leave(...args) {\r\n        const node = args[0];\r\n\r\n        for (let i = 0; i < visitors.length; i++) {\r\n          if (skipping[i] === null) {\r\n            var _leaveList$i;\r\n\r\n            const result =\r\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\r\n                ? void 0\r\n                : _leaveList$i.apply(visitors[i], args);\r\n\r\n            if (result === BREAK) {\r\n              skipping[i] = BREAK;\r\n            } else if (result !== undefined && result !== false) {\r\n              return result;\r\n            }\r\n          } else if (skipping[i] === node) {\r\n            skipping[i] = null;\r\n          }\r\n        }\r\n      },\r\n    };\r\n    mergedVisitor[kind] = mergedEnterLeave;\r\n  }\r\n\r\n  return mergedVisitor;\r\n}\r\n/**\r\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\r\n */\r\n\r\nexport function getEnterLeaveForKind(visitor, kind) {\r\n  const kindVisitor = visitor[kind];\r\n\r\n  if (typeof kindVisitor === 'object') {\r\n    // { Kind: { enter() {}, leave() {} } }\r\n    return kindVisitor;\r\n  } else if (typeof kindVisitor === 'function') {\r\n    // { Kind() {} }\r\n    return {\r\n      enter: kindVisitor,\r\n      leave: undefined,\r\n    };\r\n  } // { enter() {}, leave() {} }\r\n\r\n  return {\r\n    enter: visitor.enter,\r\n    leave: visitor.leave,\r\n  };\r\n}\r\n/**\r\n * Given a visitor instance, if it is leaving or not, and a node kind, return\r\n * the function the visitor runtime should call.\r\n *\r\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\r\n */\r\n\r\n/* c8 ignore next 8 */\r\n\r\nexport function getVisitFn(visitor, kind, isLeaving) {\r\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\r\n  return isLeaving ? leave : enter;\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,0BAA0B;AACpD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,MAAM,EAAEC,iBAAiB,QAAQ,WAAW;AACrD,SAASC,IAAI,QAAQ,aAAa;AAClC;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,KAAKA,CAACC,IAAI,EAAEC,OAAO,EAAmC;EAAA,IAAjCC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGT,iBAAiB;EAClE,IAAMY,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;EAE/B,SAAAC,EAAA,MAAAC,cAAA,GAAmBZ,MAAM,CAACa,MAAM,CAACf,IAAI,CAAC,EAAAa,EAAA,GAAAC,cAAA,CAAAL,MAAA,EAAAI,EAAA,IAAE;IAAnC,IAAMG,IAAI,GAAAF,cAAA,CAAAD,EAAA;IACbF,aAAa,CAACM,GAAG,CAACD,IAAI,EAAEE,oBAAoB,CAACZ,OAAO,EAAEU,IAAI,CAAC,CAAC;EAC9D;EACA;;EAEA,IAAIG,KAAK,GAAGT,SAAS;EACrB,IAAIU,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACjB,IAAI,CAAC;EACjC,IAAIkB,IAAI,GAAG,CAAClB,IAAI,CAAC;EACjB,IAAImB,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,IAAI,GAAGrB,IAAI;EACf,IAAIsB,GAAG,GAAGjB,SAAS;EACnB,IAAIkB,MAAM,GAAGlB,SAAS;EACtB,IAAMmB,IAAI,GAAG,EAAE;EACf,IAAMC,SAAS,GAAG,EAAE;EACpB;;EAEA,GAAG;IACDN,KAAK,EAAE;IACP,IAAMO,SAAS,GAAGP,KAAK,KAAKD,IAAI,CAACd,MAAM;IACvC,IAAMuB,QAAQ,GAAGD,SAAS,IAAIN,KAAK,CAAChB,MAAM,KAAK,CAAC;IAEhD,IAAIsB,SAAS,EAAE;MACbJ,GAAG,GAAGG,SAAS,CAACrB,MAAM,KAAK,CAAC,GAAGC,SAAS,GAAGmB,IAAI,CAACA,IAAI,CAACpB,MAAM,GAAG,CAAC,CAAC;MAChEiB,IAAI,GAAGE,MAAM;MACbA,MAAM,GAAGE,SAAS,CAACG,GAAG,CAAC,CAAC;MAExB,IAAID,QAAQ,EAAE;QACZ,IAAIZ,OAAO,EAAE;UACXM,IAAI,GAAGA,IAAI,CAACQ,KAAK,CAAC,CAAC;UACnB,IAAIC,UAAU,GAAG,CAAC;UAAC,IAAAC,SAAA,GAAAC,0BAAA,CAEgBZ,KAAK;YAAAa,KAAA;UAAA;YAAxC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA0C;cAAA,IAAAC,WAAA,GAAAC,cAAA,CAAAL,KAAA,CAAAM,KAAA;gBAA9BC,OAAO,GAAAH,WAAA;gBAAEI,SAAS,GAAAJ,WAAA;cAC5B,IAAMK,QAAQ,GAAGF,OAAO,GAAGV,UAAU;cAErC,IAAIW,SAAS,KAAK,IAAI,EAAE;gBACtBpB,IAAI,CAACsB,MAAM,CAACD,QAAQ,EAAE,CAAC,CAAC;gBACxBZ,UAAU,EAAE;cACd,CAAC,MAAM;gBACLT,IAAI,CAACqB,QAAQ,CAAC,GAAGD,SAAS;cAC5B;YACF;UAAC,SAAAG,GAAA;YAAAb,SAAA,CAAAc,CAAA,CAAAD,GAAA;UAAA;YAAAb,SAAA,CAAAe,CAAA;UAAA;QACH,CAAC,MAAM;UACLzB,IAAI,GAAGxB,MAAM,CAACkD,gBAAgB,CAC5B,CAAC,CAAC,EACFlD,MAAM,CAACmD,yBAAyB,CAAC3B,IAAI,CACvC,CAAC;UAAC,IAAA4B,UAAA,GAAAjB,0BAAA,CAEiCZ,KAAK;YAAA8B,MAAA;UAAA;YAAxC,KAAAD,UAAA,CAAAf,CAAA,MAAAgB,MAAA,GAAAD,UAAA,CAAAd,CAAA,IAAAC,IAAA,GAA0C;cAAA,IAAAe,YAAA,GAAAb,cAAA,CAAAY,MAAA,CAAAX,KAAA;gBAA9BC,QAAO,GAAAW,YAAA;gBAAEV,UAAS,GAAAU,YAAA;cAC5B9B,IAAI,CAACmB,QAAO,CAAC,GAAGC,UAAS;YAC3B;UAAC,SAAAG,GAAA;YAAAK,UAAA,CAAAJ,CAAA,CAAAD,GAAA;UAAA;YAAAK,UAAA,CAAAH,CAAA;UAAA;QACH;MACF;MAEA3B,KAAK,GAAGL,KAAK,CAACK,KAAK;MACnBD,IAAI,GAAGJ,KAAK,CAACI,IAAI;MACjBE,KAAK,GAAGN,KAAK,CAACM,KAAK;MACnBL,OAAO,GAAGD,KAAK,CAACC,OAAO;MACvBD,KAAK,GAAGA,KAAK,CAACsC,IAAI;IACpB,CAAC,MAAM,IAAI7B,MAAM,EAAE;MACjBD,GAAG,GAAGP,OAAO,GAAGI,KAAK,GAAGD,IAAI,CAACC,KAAK,CAAC;MACnCE,IAAI,GAAGE,MAAM,CAACD,GAAG,CAAC;MAElB,IAAID,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKhB,SAAS,EAAE;QACvC;MACF;MAEAmB,IAAI,CAAC6B,IAAI,CAAC/B,GAAG,CAAC;IAChB;IAEA,IAAIgC,MAAM;IAEV,IAAI,CAACtC,KAAK,CAACC,OAAO,CAACI,IAAI,CAAC,EAAE;MACxB,IAAIkC,kBAAkB,EAAEC,mBAAmB;MAE3C/D,MAAM,CAAC4B,IAAI,CAAC,IAAI9B,SAAS,CAAC,KAAK,uBAAAkE,MAAA,CAAuBjE,OAAO,CAAC6B,IAAI,CAAC,MAAG,CAAC;MACvE,IAAMqC,OAAO,GAAGhC,SAAS,GACrB,CAAC6B,kBAAkB,GAAGjD,aAAa,CAACqD,GAAG,CAACtC,IAAI,CAACV,IAAI,CAAC,MAAM,IAAI,IAC5D4C,kBAAkB,KAAK,KAAK,CAAC,GAC3B,KAAK,CAAC,GACNA,kBAAkB,CAACK,KAAK,GAC1B,CAACJ,mBAAmB,GAAGlD,aAAa,CAACqD,GAAG,CAACtC,IAAI,CAACV,IAAI,CAAC,MAAM,IAAI,IAC7D6C,mBAAmB,KAAK,KAAK,CAAC,GAC9B,KAAK,CAAC,GACNA,mBAAmB,CAACK,KAAK;MAC7BP,MAAM,GACJI,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAClC,KAAK,CAAC,GACNA,OAAO,CAACI,IAAI,CAAC7D,OAAO,EAAEoB,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAEC,IAAI,EAAEC,SAAS,CAAC;MAE/D,IAAI6B,MAAM,KAAK1D,KAAK,EAAE;QACpB;MACF;MAEA,IAAI0D,MAAM,KAAK,KAAK,EAAE;QACpB,IAAI,CAAC5B,SAAS,EAAE;UACdF,IAAI,CAACI,GAAG,CAAC,CAAC;UACV;QACF;MACF,CAAC,MAAM,IAAI0B,MAAM,KAAKjD,SAAS,EAAE;QAC/Be,KAAK,CAACiC,IAAI,CAAC,CAAC/B,GAAG,EAAEgC,MAAM,CAAC,CAAC;QAEzB,IAAI,CAAC5B,SAAS,EAAE;UACd,IAAIjC,MAAM,CAAC6D,MAAM,CAAC,EAAE;YAClBjC,IAAI,GAAGiC,MAAM;UACf,CAAC,MAAM;YACL9B,IAAI,CAACI,GAAG,CAAC,CAAC;YACV;UACF;QACF;MACF;IACF;IAEA,IAAI0B,MAAM,KAAKjD,SAAS,IAAIsB,QAAQ,EAAE;MACpCP,KAAK,CAACiC,IAAI,CAAC,CAAC/B,GAAG,EAAED,IAAI,CAAC,CAAC;IACzB;IAEA,IAAIK,SAAS,EAAE;MACbF,IAAI,CAACI,GAAG,CAAC,CAAC;IACZ,CAAC,MAAM;MACL,IAAImC,UAAU;MAEdjD,KAAK,GAAG;QACNC,OAAO,EAAPA,OAAO;QACPI,KAAK,EAALA,KAAK;QACLD,IAAI,EAAJA,IAAI;QACJE,KAAK,EAALA,KAAK;QACLgC,IAAI,EAAEtC;MACR,CAAC;MACDC,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACI,IAAI,CAAC;MAC7BH,IAAI,GAAGH,OAAO,GACVM,IAAI,GACJ,CAAC0C,UAAU,GAAG7D,WAAW,CAACmB,IAAI,CAACV,IAAI,CAAC,MAAM,IAAI,IAC9CoD,UAAU,KAAK,KAAK,CAAC,GACrBA,UAAU,GACV,EAAE;MACN5C,KAAK,GAAG,CAAC,CAAC;MACVC,KAAK,GAAG,EAAE;MAEV,IAAIG,MAAM,EAAE;QACVE,SAAS,CAAC4B,IAAI,CAAC9B,MAAM,CAAC;MACxB;MAEAA,MAAM,GAAGF,IAAI;IACf;EACF,CAAC,QAAQP,KAAK,KAAKT,SAAS;EAE5B,IAAIe,KAAK,CAAChB,MAAM,KAAK,CAAC,EAAE;IACtB;IACA,OAAOgB,KAAK,CAACA,KAAK,CAAChB,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACnC;EAEA,OAAOJ,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASgE,eAAeA,CAACC,QAAQ,EAAE;EACxC,IAAMC,QAAQ,GAAG,IAAIlD,KAAK,CAACiD,QAAQ,CAAC7D,MAAM,CAAC,CAAC+D,IAAI,CAAC,IAAI,CAAC;EACtD,IAAMC,aAAa,GAAGvE,MAAM,CAACwE,MAAM,CAAC,IAAI,CAAC;EAAC,IAAAC,KAAA,YAAAA,MAAA,EAEF;IAAnC,IAAM3D,IAAI,GAAA4D,eAAA,CAAAC,GAAA;IACb,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAMC,SAAS,GAAG,IAAI1D,KAAK,CAACiD,QAAQ,CAAC7D,MAAM,CAAC,CAAC+D,IAAI,CAAC9D,SAAS,CAAC;IAC5D,IAAMsE,SAAS,GAAG,IAAI3D,KAAK,CAACiD,QAAQ,CAAC7D,MAAM,CAAC,CAAC+D,IAAI,CAAC9D,SAAS,CAAC;IAE5D,KAAK,IAAIuE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,QAAQ,CAAC7D,MAAM,EAAE,EAAEwE,CAAC,EAAE;MACxC,IAAAC,qBAAA,GAAyBhE,oBAAoB,CAACoD,QAAQ,CAACW,CAAC,CAAC,EAAEjE,IAAI,CAAC;QAAxDkD,KAAK,GAAAgB,qBAAA,CAALhB,KAAK;QAAED,KAAK,GAAAiB,qBAAA,CAALjB,KAAK;MACpBa,UAAU,KAAKA,UAAU,GAAGZ,KAAK,IAAI,IAAI,IAAID,KAAK,IAAI,IAAI,CAAC;MAC3Dc,SAAS,CAACE,CAAC,CAAC,GAAGf,KAAK;MACpBc,SAAS,CAACC,CAAC,CAAC,GAAGhB,KAAK;IACtB;IAEA,IAAI,CAACa,UAAU,EAAE;MAAA;IAEjB;IAEA,IAAMK,gBAAgB,GAAG;MACvBjB,KAAK,WAAAA,MAAA,EAAU;QAAA,SAAAkB,IAAA,GAAA5E,SAAA,CAAAC,MAAA,EAAN4E,IAAI,OAAAhE,KAAA,CAAA+D,IAAA,GAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;UAAJD,IAAI,CAAAC,IAAA,IAAA9E,SAAA,CAAA8E,IAAA;QAAA;QACX,IAAM5D,IAAI,GAAG2D,IAAI,CAAC,CAAC,CAAC;QAEpB,KAAK,IAAIJ,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGX,QAAQ,CAAC7D,MAAM,EAAEwE,GAAC,EAAE,EAAE;UACxC,IAAIV,QAAQ,CAACU,GAAC,CAAC,KAAK,IAAI,EAAE;YACxB,IAAIM,YAAY;YAEhB,IAAM5B,MAAM,GACV,CAAC4B,YAAY,GAAGR,SAAS,CAACE,GAAC,CAAC,MAAM,IAAI,IAAIM,YAAY,KAAK,KAAK,CAAC,GAC7D,KAAK,CAAC,GACNA,YAAY,CAACC,KAAK,CAAClB,QAAQ,CAACW,GAAC,CAAC,EAAEI,IAAI,CAAC;YAE3C,IAAI1B,MAAM,KAAK,KAAK,EAAE;cACpBY,QAAQ,CAACU,GAAC,CAAC,GAAGvD,IAAI;YACpB,CAAC,MAAM,IAAIiC,MAAM,KAAK1D,KAAK,EAAE;cAC3BsE,QAAQ,CAACU,GAAC,CAAC,GAAGhF,KAAK;YACrB,CAAC,MAAM,IAAI0D,MAAM,KAAKjD,SAAS,EAAE;cAC/B,OAAOiD,MAAM;YACf;UACF;QACF;MACF,CAAC;MAEDM,KAAK,WAAAA,MAAA,EAAU;QAAA,SAAAwB,KAAA,GAAAjF,SAAA,CAAAC,MAAA,EAAN4E,IAAI,OAAAhE,KAAA,CAAAoE,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;UAAJL,IAAI,CAAAK,KAAA,IAAAlF,SAAA,CAAAkF,KAAA;QAAA;QACX,IAAMhE,IAAI,GAAG2D,IAAI,CAAC,CAAC,CAAC;QAEpB,KAAK,IAAIJ,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGX,QAAQ,CAAC7D,MAAM,EAAEwE,GAAC,EAAE,EAAE;UACxC,IAAIV,QAAQ,CAACU,GAAC,CAAC,KAAK,IAAI,EAAE;YACxB,IAAIU,YAAY;YAEhB,IAAMhC,MAAM,GACV,CAACgC,YAAY,GAAGX,SAAS,CAACC,GAAC,CAAC,MAAM,IAAI,IAAIU,YAAY,KAAK,KAAK,CAAC,GAC7D,KAAK,CAAC,GACNA,YAAY,CAACH,KAAK,CAAClB,QAAQ,CAACW,GAAC,CAAC,EAAEI,IAAI,CAAC;YAE3C,IAAI1B,MAAM,KAAK1D,KAAK,EAAE;cACpBsE,QAAQ,CAACU,GAAC,CAAC,GAAGhF,KAAK;YACrB,CAAC,MAAM,IAAI0D,MAAM,KAAKjD,SAAS,IAAIiD,MAAM,KAAK,KAAK,EAAE;cACnD,OAAOA,MAAM;YACf;UACF,CAAC,MAAM,IAAIY,QAAQ,CAACU,GAAC,CAAC,KAAKvD,IAAI,EAAE;YAC/B6C,QAAQ,CAACU,GAAC,CAAC,GAAG,IAAI;UACpB;QACF;MACF;IACF,CAAC;IACDR,aAAa,CAACzD,IAAI,CAAC,GAAGmE,gBAAgB;EACxC,CAAC;EAhED,SAAAN,GAAA,MAAAD,eAAA,GAAmB1E,MAAM,CAACa,MAAM,CAACf,IAAI,CAAC,EAAA6E,GAAA,GAAAD,eAAA,CAAAnE,MAAA,EAAAoE,GAAA;IAAA,IAAAe,IAAA,GAAAjB,KAAA;IAAA,IAAAiB,IAAA,iBAalC;EAAS;EAqDb,OAAOnB,aAAa;AACtB;AACA;AACA;AACA;;AAEA,OAAO,SAASvD,oBAAoBA,CAACZ,OAAO,EAAEU,IAAI,EAAE;EAClD,IAAM6E,WAAW,GAAGvF,OAAO,CAACU,IAAI,CAAC;EAEjC,IAAI,OAAO6E,WAAW,KAAK,QAAQ,EAAE;IACnC;IACA,OAAOA,WAAW;EACpB,CAAC,MAAM,IAAI,OAAOA,WAAW,KAAK,UAAU,EAAE;IAC5C;IACA,OAAO;MACL3B,KAAK,EAAE2B,WAAW;MAClB5B,KAAK,EAAEvD;IACT,CAAC;EACH,CAAC,CAAC;;EAEF,OAAO;IACLwD,KAAK,EAAE5D,OAAO,CAAC4D,KAAK;IACpBD,KAAK,EAAE3D,OAAO,CAAC2D;EACjB,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,SAAS6B,UAAUA,CAACxF,OAAO,EAAEU,IAAI,EAAEe,SAAS,EAAE;EACnD,IAAAgE,sBAAA,GAAyB7E,oBAAoB,CAACZ,OAAO,EAAEU,IAAI,CAAC;IAApDkD,KAAK,GAAA6B,sBAAA,CAAL7B,KAAK;IAAED,KAAK,GAAA8B,sBAAA,CAAL9B,KAAK;EACpB,OAAOlC,SAAS,GAAGkC,KAAK,GAAGC,KAAK;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}