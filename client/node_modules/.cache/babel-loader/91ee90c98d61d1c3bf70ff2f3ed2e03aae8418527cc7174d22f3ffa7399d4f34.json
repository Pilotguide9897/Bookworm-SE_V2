{"ast":null,"code":"import React,{useState}from'react';import{useMutation}from'@apollo/client';import{Form,Button,Alert}from'react-bootstrap';import{ADD_USER}from'../utils/mutations';import Auth from'../utils/auth';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const SignupForm=()=>{// set initial form state\nconst[userFormData,setUserFormData]=useState({username:'',email:'',password:''});// set state for form validation\nconst[validated]=useState(false);// set state for alert\nconst[showAlert,setShowAlert]=useState(false);const[addUser,{error}]=useMutation(ADD_USER);const handleInputChange=event=>{const{name,value}=event.target;setUserFormData({...userFormData,[name]:value});};const handleFormSubmit=async event=>{event.preventDefault();// check if form has everything (as per react-bootstrap docs)\nconst form=event.currentTarget;if(form.checkValidity()===false){event.preventDefault();event.stopPropagation();}try{console.log(`userFormData: ${userFormData}`);console.log(`userFormData.username: ${userFormData.username}`);console.log(`userFormData.email: ${userFormData.email}`);console.log(`userFormData.password: ${userFormData.password}`);const{data}=await addUser({variables:{username:userFormData.username,email:userFormData.email,password:userFormData.password}});if(!data){throw new Error(\"something went wrong with the GraphQl server!\");}const{token,user}=data.addUser;console.log(user);Auth.login(token);}catch(err){console.error('Error with signing-up:',err);setShowAlert(true);}setUserFormData({username:'',email:'',password:''});};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Form,{noValidate:true,validated:validated,onSubmit:handleFormSubmit,children:[/*#__PURE__*/_jsx(Alert,{dismissible:true,onClose:()=>setShowAlert(false),show:showAlert,variant:\"danger\",children:\"Something went wrong with your signup!\"}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{htmlFor:\"username\",children:\"Username\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"Your username\",name:\"username\",onChange:handleInputChange,value:userFormData.username,required:true}),/*#__PURE__*/_jsx(Form.Control.Feedback,{type:\"invalid\",children:\"Username is required!\"})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{htmlFor:\"email\",children:\"Email\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"email\",placeholder:\"Your email address\",name:\"email\",onChange:handleInputChange,value:userFormData.email,required:true}),/*#__PURE__*/_jsx(Form.Control.Feedback,{type:\"invalid\",children:\"Email is required!\"})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{htmlFor:\"password\",children:\"Password\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",placeholder:\"Your password\",name:\"password\",onChange:handleInputChange,value:userFormData.password,required:true}),/*#__PURE__*/_jsx(Form.Control.Feedback,{type:\"invalid\",children:\"Password is required!\"})]}),/*#__PURE__*/_jsx(Button,{disabled:!(userFormData.username&&userFormData.email&&userFormData.password),type:\"submit\",variant:\"success\",children:\"Submit\"})]})});};export default SignupForm;","map":{"version":3,"names":["React","useState","useMutation","Form","Button","Alert","ADD_USER","Auth","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SignupForm","userFormData","setUserFormData","username","email","password","validated","showAlert","setShowAlert","addUser","error","handleInputChange","event","name","value","target","handleFormSubmit","preventDefault","form","currentTarget","checkValidity","stopPropagation","console","log","data","variables","Error","token","user","login","err","children","noValidate","onSubmit","dismissible","onClose","show","variant","Group","className","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","disabled"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/src/components/SignupForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client'\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { ADD_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      console.log(`userFormData: ${userFormData}`);\r\n      console.log(`userFormData.username: ${userFormData.username}`);\r\n      console.log(`userFormData.email: ${userFormData.email}`);\r\n      console.log(`userFormData.password: ${userFormData.password}`);\r\n      const { data } = await addUser ({\r\n        variables: {\r\n          username: userFormData.username,\r\n          email: userFormData.email,\r\n          password: userFormData.password,\r\n        }\r\n      });\r\n\r\n      if (!data) {\r\n        throw new Error(\"something went wrong with the GraphQl server!\");\r\n      }\r\n      const { token, user } = data.addUser;\r\n      console.log(user);\r\n      Auth.login(token);\r\n    } catch (err) {\r\n      console.error('Error with signing-up:', err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group className='mb-3'>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='mb-3'>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group className='mb-3'>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,WAAW,KAAQ,gBAAgB,CAC5C,OAASC,IAAI,CAAEC,MAAM,CAAEC,KAAK,KAAQ,iBAAiB,CACrD,OAASC,QAAQ,KAAQ,oBAAoB,CAC7C,MAAO,CAAAC,IAAI,KAAM,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAEjC,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvB;AACA,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGf,QAAQ,CAAC,CAAEgB,QAAQ,CAAE,EAAE,CAAEC,KAAK,CAAE,EAAE,CAAEC,QAAQ,CAAE,EAAG,CAAC,CAAC,CAC3F;AACA,KAAM,CAACC,SAAS,CAAC,CAAGnB,QAAQ,CAAC,KAAK,CAAC,CACnC;AACA,KAAM,CAACoB,SAAS,CAAEC,YAAY,CAAC,CAAGrB,QAAQ,CAAC,KAAK,CAAC,CAEjD,KAAM,CAACsB,OAAO,CAAE,CAAEC,KAAM,CAAC,CAAC,CAAGtB,WAAW,CAACI,QAAQ,CAAC,CAElD,KAAM,CAAAmB,iBAAiB,CAAIC,KAAK,EAAK,CACnC,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAGF,KAAK,CAACG,MAAM,CACpCb,eAAe,CAAC,CAAE,GAAGD,YAAY,CAAE,CAACY,IAAI,EAAGC,KAAM,CAAC,CAAC,CACrD,CAAC,CAED,KAAM,CAAAE,gBAAgB,CAAG,KAAO,CAAAJ,KAAK,EAAK,CACxCA,KAAK,CAACK,cAAc,CAAC,CAAC,CAEtB;AACA,KAAM,CAAAC,IAAI,CAAGN,KAAK,CAACO,aAAa,CAChC,GAAID,IAAI,CAACE,aAAa,CAAC,CAAC,GAAK,KAAK,CAAE,CAClCR,KAAK,CAACK,cAAc,CAAC,CAAC,CACtBL,KAAK,CAACS,eAAe,CAAC,CAAC,CACzB,CAEA,GAAI,CACFC,OAAO,CAACC,GAAG,CAAE,iBAAgBtB,YAAa,EAAC,CAAC,CAC5CqB,OAAO,CAACC,GAAG,CAAE,0BAAyBtB,YAAY,CAACE,QAAS,EAAC,CAAC,CAC9DmB,OAAO,CAACC,GAAG,CAAE,uBAAsBtB,YAAY,CAACG,KAAM,EAAC,CAAC,CACxDkB,OAAO,CAACC,GAAG,CAAE,0BAAyBtB,YAAY,CAACI,QAAS,EAAC,CAAC,CAC9D,KAAM,CAAEmB,IAAK,CAAC,CAAG,KAAM,CAAAf,OAAO,CAAE,CAC9BgB,SAAS,CAAE,CACTtB,QAAQ,CAAEF,YAAY,CAACE,QAAQ,CAC/BC,KAAK,CAAEH,YAAY,CAACG,KAAK,CACzBC,QAAQ,CAAEJ,YAAY,CAACI,QACzB,CACF,CAAC,CAAC,CAEF,GAAI,CAACmB,IAAI,CAAE,CACT,KAAM,IAAI,CAAAE,KAAK,CAAC,+CAA+C,CAAC,CAClE,CACA,KAAM,CAAEC,KAAK,CAAEC,IAAK,CAAC,CAAGJ,IAAI,CAACf,OAAO,CACpCa,OAAO,CAACC,GAAG,CAACK,IAAI,CAAC,CACjBnC,IAAI,CAACoC,KAAK,CAACF,KAAK,CAAC,CACnB,CAAE,MAAOG,GAAG,CAAE,CACZR,OAAO,CAACZ,KAAK,CAAC,wBAAwB,CAAEoB,GAAG,CAAC,CAC5CtB,YAAY,CAAC,IAAI,CAAC,CACpB,CAEAN,eAAe,CAAC,CACdC,QAAQ,CAAE,EAAE,CACZC,KAAK,CAAE,EAAE,CACTC,QAAQ,CAAE,EACZ,CAAC,CAAC,CACJ,CAAC,CAED,mBACEV,IAAA,CAAAI,SAAA,EAAAgC,QAAA,cAEElC,KAAA,CAACR,IAAI,EAAC2C,UAAU,MAAC1B,SAAS,CAAEA,SAAU,CAAC2B,QAAQ,CAAEjB,gBAAiB,CAAAe,QAAA,eAEhEpC,IAAA,CAACJ,KAAK,EAAC2C,WAAW,MAACC,OAAO,CAAEA,CAAA,GAAM3B,YAAY,CAAC,KAAK,CAAE,CAAC4B,IAAI,CAAE7B,SAAU,CAAC8B,OAAO,CAAC,QAAQ,CAAAN,QAAA,CAAC,wCAEzF,CAAO,CAAC,cAERlC,KAAA,CAACR,IAAI,CAACiD,KAAK,EAACC,SAAS,CAAC,MAAM,CAAAR,QAAA,eAC1BpC,IAAA,CAACN,IAAI,CAACmD,KAAK,EAACC,OAAO,CAAC,UAAU,CAAAV,QAAA,CAAC,UAAQ,CAAY,CAAC,cACpDpC,IAAA,CAACN,IAAI,CAACqD,OAAO,EACXC,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,eAAe,CAC3B/B,IAAI,CAAC,UAAU,CACfgC,QAAQ,CAAElC,iBAAkB,CAC5BG,KAAK,CAAEb,YAAY,CAACE,QAAS,CAC7B2C,QAAQ,MACT,CAAC,cACFnD,IAAA,CAACN,IAAI,CAACqD,OAAO,CAACK,QAAQ,EAACJ,IAAI,CAAC,SAAS,CAAAZ,QAAA,CAAC,uBAAqB,CAAuB,CAAC,EACzE,CAAC,cAEblC,KAAA,CAACR,IAAI,CAACiD,KAAK,EAACC,SAAS,CAAC,MAAM,CAAAR,QAAA,eAC1BpC,IAAA,CAACN,IAAI,CAACmD,KAAK,EAACC,OAAO,CAAC,OAAO,CAAAV,QAAA,CAAC,OAAK,CAAY,CAAC,cAC9CpC,IAAA,CAACN,IAAI,CAACqD,OAAO,EACXC,IAAI,CAAC,OAAO,CACZC,WAAW,CAAC,oBAAoB,CAChC/B,IAAI,CAAC,OAAO,CACZgC,QAAQ,CAAElC,iBAAkB,CAC5BG,KAAK,CAAEb,YAAY,CAACG,KAAM,CAC1B0C,QAAQ,MACT,CAAC,cACFnD,IAAA,CAACN,IAAI,CAACqD,OAAO,CAACK,QAAQ,EAACJ,IAAI,CAAC,SAAS,CAAAZ,QAAA,CAAC,oBAAkB,CAAuB,CAAC,EACtE,CAAC,cAEblC,KAAA,CAACR,IAAI,CAACiD,KAAK,EAACC,SAAS,CAAC,MAAM,CAAAR,QAAA,eAC1BpC,IAAA,CAACN,IAAI,CAACmD,KAAK,EAACC,OAAO,CAAC,UAAU,CAAAV,QAAA,CAAC,UAAQ,CAAY,CAAC,cACpDpC,IAAA,CAACN,IAAI,CAACqD,OAAO,EACXC,IAAI,CAAC,UAAU,CACfC,WAAW,CAAC,eAAe,CAC3B/B,IAAI,CAAC,UAAU,CACfgC,QAAQ,CAAElC,iBAAkB,CAC5BG,KAAK,CAAEb,YAAY,CAACI,QAAS,CAC7ByC,QAAQ,MACT,CAAC,cACFnD,IAAA,CAACN,IAAI,CAACqD,OAAO,CAACK,QAAQ,EAACJ,IAAI,CAAC,SAAS,CAAAZ,QAAA,CAAC,uBAAqB,CAAuB,CAAC,EACzE,CAAC,cACbpC,IAAA,CAACL,MAAM,EACL0D,QAAQ,CAAE,EAAE/C,YAAY,CAACE,QAAQ,EAAIF,YAAY,CAACG,KAAK,EAAIH,YAAY,CAACI,QAAQ,CAAE,CAClFsC,IAAI,CAAC,QAAQ,CACbN,OAAO,CAAC,SAAS,CAAAN,QAAA,CAAC,QAEpB,CAAQ,CAAC,EACL,CAAC,CACP,CAAC,CAEP,CAAC,CAED,cAAe,CAAA/B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}