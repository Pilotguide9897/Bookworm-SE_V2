{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\r\n * Scalar leafs\r\n *\r\n * A GraphQL document is valid only if all leaf fields (fields without\r\n * sub selections) are of scalar or enum types.\r\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            var fieldName = node.name.value;\n            var typeStr = inspect(type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since type \\\"\").concat(typeStr, \"\\\" has no subfields.\"), {\n              nodes: selectionSet\n            }));\n          }\n        } else if (!selectionSet) {\n          var _fieldName = node.name.value;\n          var _typeStr = inspect(type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(_fieldName, \"\\\" of type \\\"\").concat(_typeStr, \"\\\" must have a selection of subfields. Did you mean \\\"\").concat(_fieldName, \" { ... }\\\"?\"), {\n            nodes: node\n          }));\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["inspect","GraphQLError","getNamedType","isLeafType","ScalarLeafsRule","context","Field","node","type","getType","selectionSet","fieldName","name","value","typeStr","reportError","concat","nodes"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\r\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\r\n\r\n/**\r\n * Scalar leafs\r\n *\r\n * A GraphQL document is valid only if all leaf fields (fields without\r\n * sub selections) are of scalar or enum types.\r\n */\r\nexport function ScalarLeafsRule(context) {\r\n  return {\r\n    Field(node) {\r\n      const type = context.getType();\r\n      const selectionSet = node.selectionSet;\r\n\r\n      if (type) {\r\n        if (isLeafType(getNamedType(type))) {\r\n          if (selectionSet) {\r\n            const fieldName = node.name.value;\r\n            const typeStr = inspect(type);\r\n            context.reportError(\r\n              new GraphQLError(\r\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\r\n                {\r\n                  nodes: selectionSet,\r\n                },\r\n              ),\r\n            );\r\n          }\r\n        } else if (!selectionSet) {\r\n          const fieldName = node.name.value;\r\n          const typeStr = inspect(type);\r\n          context.reportError(\r\n            new GraphQLError(\r\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\r\n              {\r\n                nodes: node,\r\n              },\r\n            ),\r\n          );\r\n        }\r\n      }\r\n    },\r\n  };\r\n}\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,YAAY,EAAEC,UAAU,QAAQ,2BAA2B;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAE;EACvC,OAAO;IACLC,KAAK,WAAAA,MAACC,IAAI,EAAE;MACV,IAAMC,IAAI,GAAGH,OAAO,CAACI,OAAO,CAAC,CAAC;MAC9B,IAAMC,YAAY,GAAGH,IAAI,CAACG,YAAY;MAEtC,IAAIF,IAAI,EAAE;QACR,IAAIL,UAAU,CAACD,YAAY,CAACM,IAAI,CAAC,CAAC,EAAE;UAClC,IAAIE,YAAY,EAAE;YAChB,IAAMC,SAAS,GAAGJ,IAAI,CAACK,IAAI,CAACC,KAAK;YACjC,IAAMC,OAAO,GAAGd,OAAO,CAACQ,IAAI,CAAC;YAC7BH,OAAO,CAACU,WAAW,CACjB,IAAId,YAAY,YAAAe,MAAA,CACJL,SAAS,gDAAAK,MAAA,CAA2CF,OAAO,2BACrE;cACEG,KAAK,EAAEP;YACT,CACF,CACF,CAAC;UACH;QACF,CAAC,MAAM,IAAI,CAACA,YAAY,EAAE;UACxB,IAAMC,UAAS,GAAGJ,IAAI,CAACK,IAAI,CAACC,KAAK;UACjC,IAAMC,QAAO,GAAGd,OAAO,CAACQ,IAAI,CAAC;UAC7BH,OAAO,CAACU,WAAW,CACjB,IAAId,YAAY,YAAAe,MAAA,CACJL,UAAS,mBAAAK,MAAA,CAAcF,QAAO,4DAAAE,MAAA,CAAuDL,UAAS,kBACxG;YACEM,KAAK,EAAEV;UACT,CACF,CACF,CAAC;QACH;MACF;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}