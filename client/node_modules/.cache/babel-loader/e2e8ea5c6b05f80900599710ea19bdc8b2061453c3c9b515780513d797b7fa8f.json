{"ast":null,"code":"// use this to decode a token and get the user's information out of it\nimport decode from'jwt-decode';// create a new class to instantiate for a user\nclass AuthService{// get user data\ngetProfile(){return decode(this.getToken());}// check if user's logged in\nloggedIn(){// Checks if there is a saved token and it's still valid\nconst token=this.getToken();return!!token&&!this.isTokenExpired(token);// handwaiving here\n}// check if token is expired\nisTokenExpired(token){try{const decoded=decode(token);if(decoded.exp<Date.now()/1000){return true;}else return false;}catch(err){return false;}}getToken(){// Retrieves the user token from localStorage\nreturn localStorage.getItem('id_token');}login(idToken){// Saves user token to localStorage\nlocalStorage.setItem('id_token',idToken);window.location.assign('/');}logout(){// Clear user token and profile data from localStorage\nlocalStorage.removeItem('id_token');// this will reload the page and reset the state of the application\nwindow.location.assign('/');}}export default new AuthService();","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/src/utils/auth.js"],"sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,MAAM,KAAM,YAAY,CAE/B;AACA,KAAM,CAAAC,WAAY,CAChB;AACAC,UAAUA,CAAA,CAAG,CACX,MAAO,CAAAF,MAAM,CAAC,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC,CAChC,CAEA;AACAC,QAAQA,CAAA,CAAG,CACT;AACA,KAAM,CAAAC,KAAK,CAAG,IAAI,CAACF,QAAQ,CAAC,CAAC,CAC7B,MAAO,CAAC,CAACE,KAAK,EAAI,CAAC,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC,CAAE;AACjD,CAEA;AACAC,cAAcA,CAACD,KAAK,CAAE,CACpB,GAAI,CACF,KAAM,CAAAE,OAAO,CAAGP,MAAM,CAACK,KAAK,CAAC,CAC7B,GAAIE,OAAO,CAACC,GAAG,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAE,CACnC,MAAO,KAAI,CACb,CAAC,IAAM,OAAO,MAAK,CACrB,CAAE,MAAOC,GAAG,CAAE,CACZ,MAAO,MAAK,CACd,CACF,CAEAR,QAAQA,CAAA,CAAG,CACT;AACA,MAAO,CAAAS,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CACzC,CAEAC,KAAKA,CAACC,OAAO,CAAE,CACb;AACAH,YAAY,CAACI,OAAO,CAAC,UAAU,CAAED,OAAO,CAAC,CACzCE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC,CAC7B,CAEAC,MAAMA,CAAA,CAAG,CACP;AACAR,YAAY,CAACS,UAAU,CAAC,UAAU,CAAC,CACnC;AACAJ,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC,CAC7B,CACF,CAEA,cAAe,IAAI,CAAAlB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}