{"ast":null,"code":"import _classCallCheck from \"C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\r\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\r\n * optional, but they are useful for clients who store GraphQL documents in source files.\r\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\r\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\r\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\r\n */\nexport var Source = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function Source(body) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';\n    var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      line: 1,\n      column: 1\n    };\n    _classCallCheck(this, Source);\n    typeof body === 'string' || devAssert(false, \"Body must be a string. Received: \".concat(inspect(body), \".\"));\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 || devAssert(false, 'line in locationOffset is 1-indexed and must be positive.');\n    this.locationOffset.column > 0 || devAssert(false, 'column in locationOffset is 1-indexed and must be positive.');\n  }\n  _createClass(Source, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Source';\n    }\n  }]);\n  return Source;\n}(Symbol.toStringTag);\n/**\r\n * Test if the given value is a Source object.\r\n *\r\n * @internal\r\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}","map":{"version":3,"names":["devAssert","inspect","instanceOf","Source","_Symbol$toStringTag","body","name","arguments","length","undefined","locationOffset","line","column","_classCallCheck","concat","_createClass","key","get","Symbol","toStringTag","isSource","source"],"sources":["C:/Users/jared/PortfolioProjects/BookwormSE/Develop/client/node_modules/graphql/language/source.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\r\nimport { inspect } from '../jsutils/inspect.mjs';\r\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\r\n\r\n/**\r\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\r\n * optional, but they are useful for clients who store GraphQL documents in source files.\r\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\r\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\r\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\r\n */\r\nexport class Source {\r\n  constructor(\r\n    body,\r\n    name = 'GraphQL request',\r\n    locationOffset = {\r\n      line: 1,\r\n      column: 1,\r\n    },\r\n  ) {\r\n    typeof body === 'string' ||\r\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\r\n    this.body = body;\r\n    this.name = name;\r\n    this.locationOffset = locationOffset;\r\n    this.locationOffset.line > 0 ||\r\n      devAssert(\r\n        false,\r\n        'line in locationOffset is 1-indexed and must be positive.',\r\n      );\r\n    this.locationOffset.column > 0 ||\r\n      devAssert(\r\n        false,\r\n        'column in locationOffset is 1-indexed and must be positive.',\r\n      );\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'Source';\r\n  }\r\n}\r\n/**\r\n * Test if the given value is a Source object.\r\n *\r\n * @internal\r\n */\r\n\r\nexport function isSource(source) {\r\n  return instanceOf(source, Source);\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,0BAA0B;AACpD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,2BAA2B;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,MAAM,0BAAAC,mBAAA;EACjB,SAAAD,OACEE,IAAI,EAMJ;IAAA,IALAC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,iBAAiB;IAAA,IACxBG,cAAc,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;MACfI,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE;IACV,CAAC;IAAAC,eAAA,OAAAV,MAAA;IAED,OAAOE,IAAI,KAAK,QAAQ,IACtBL,SAAS,CAAC,KAAK,sCAAAc,MAAA,CAAsCb,OAAO,CAACI,IAAI,CAAC,MAAG,CAAC;IACxE,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACI,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACA,cAAc,CAACC,IAAI,GAAG,CAAC,IAC1BX,SAAS,CACP,KAAK,EACL,2DACF,CAAC;IACH,IAAI,CAACU,cAAc,CAACE,MAAM,GAAG,CAAC,IAC5BZ,SAAS,CACP,KAAK,EACL,6DACF,CAAC;EACL;EAACe,YAAA,CAAAZ,MAAA;IAAAa,GAAA,EAAAZ,mBAAA;IAAAa,GAAA,EAED,SAAAA,IAAA,EAA2B;MACzB,OAAO,QAAQ;IACjB;EAAC;EAAA,OAAAd,MAAA;AAAA,EAFIe,MAAM,CAACC,WAAW;AAIzB;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAQA,CAACC,MAAM,EAAE;EAC/B,OAAOnB,UAAU,CAACmB,MAAM,EAAElB,MAAM,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}